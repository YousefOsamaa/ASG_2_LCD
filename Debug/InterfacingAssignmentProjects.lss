
InterfacingAssignmentProjects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00003180  00003214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800182  00800182  00003336  2**0
                  ALLOC
  3 .stab         00003630  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001668  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  00008361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  0000a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000b8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c990  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  0000cb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  0000ce19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__vector_1>
       8:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_2>
       c:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 18 	call	0x303c	; 0x303c <main>
      8a:	0c 94 be 18 	jmp	0x317c	; 0x317c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	ed 58       	subi	r30, 0x8D	; 141
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
     d3e:	78 94       	sei
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
     d4e:	f8 94       	cli

     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <EXTI_enu_Initialization+0x6>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
     d64:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     d66:	19 82       	std	Y+1, r1	; 0x01
     d68:	3b c0       	rjmp	.+118    	; 0xde0 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	c9 01       	movw	r24, r18
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	fc 01       	movw	r30, r24
     d7c:	ec 58       	subi	r30, 0x8C	; 140
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	40 81       	ld	r20, Z
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	c9 01       	movw	r24, r18
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	fc 01       	movw	r30, r24
     d94:	eb 58       	subi	r30, 0x8B	; 139
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	90 81       	ld	r25, Z
     d9a:	84 2f       	mov	r24, r20
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 6d 08 	call	0x10da	; 0x10da <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	c9 01       	movw	r24, r18
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	fc 01       	movw	r30, r24
     db4:	ec 58       	subi	r30, 0x8C	; 140
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	40 81       	ld	r20, Z
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	c9 01       	movw	r24, r18
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	fc 01       	movw	r30, r24
     dcc:	ea 58       	subi	r30, 0x8A	; 138
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	90 81       	ld	r25, Z
     dd2:	84 2f       	mov	r24, r20
     dd4:	69 2f       	mov	r22, r25
     dd6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	90 91 73 01 	lds	r25, 0x0173
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 17       	cp	r24, r25
     de8:	08 f4       	brcc	.+2      	; 0xdec <EXTI_enu_Initialization+0x96>
     dea:	bf cf       	rjmp	.-130    	; 0xd6a <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
     dec:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <EXTI_enu_ISC+0x6>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	6b 81       	ldd	r22, Y+3	; 0x03
     e12:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <enu_SetSenseLevel>
     e16:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <EXTI_enu_INTMode+0x6>
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	6b 81       	ldd	r22, Y+3	; 0x03
     e3e:	0e 94 6d 08 	call	0x10da	; 0x10da <enu_SetMode>
     e42:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <EXTI_enu_GetPIF+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <EXTI_enu_GetPIF+0x8>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <EXTI_enu_GetPIF+0xa>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
     e62:	7c 83       	std	Y+4, r23	; 0x04
     e64:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	d1 f1       	breq	.+116    	; 0xee6 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	3e 83       	std	Y+6, r19	; 0x06
     e7a:	2d 83       	std	Y+5, r18	; 0x05
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	b1 f0       	breq	.+44     	; 0xeb2 <EXTI_enu_GetPIF+0x60>
     e86:	2d 81       	ldd	r18, Y+5	; 0x05
     e88:	3e 81       	ldd	r19, Y+6	; 0x06
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	e1 f0       	breq	.+56     	; 0xec8 <EXTI_enu_GetPIF+0x76>
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	21 f5       	brne	.+72     	; 0xee0 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
     e98:	ea e5       	ldi	r30, 0x5A	; 90
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 95       	swap	r24
     ea0:	86 95       	lsr	r24
     ea2:	86 95       	lsr	r24
     ea4:	83 70       	andi	r24, 0x03	; 3
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	eb 81       	ldd	r30, Y+3	; 0x03
     eaa:	fc 81       	ldd	r31, Y+4	; 0x04
     eac:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	1c c0       	rjmp	.+56     	; 0xeea <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
     eb2:	ea e5       	ldi	r30, 0x5A	; 90
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 1f       	adc	r24, r24
     eba:	88 27       	eor	r24, r24
     ebc:	88 1f       	adc	r24, r24
     ebe:	eb 81       	ldd	r30, Y+3	; 0x03
     ec0:	fc 81       	ldd	r31, Y+4	; 0x04
     ec2:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     ec4:	19 82       	std	Y+1, r1	; 0x01
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
     ec8:	ea e5       	ldi	r30, 0x5A	; 90
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	86 95       	lsr	r24
     ed2:	87 70       	andi	r24, 0x07	; 7
     ed4:	81 70       	andi	r24, 0x01	; 1
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     edc:	19 82       	std	Y+1, r1	; 0x01
     ede:	05 c0       	rjmp	.+10     	; 0xeea <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	26 96       	adiw	r28, 0x06	; 6
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <EXTI_enu_ClearINTFx+0x6>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	0e 94 8f 09 	call	0x131e	; 0x131e <enu_SetFlagValue>
     f16:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <EXTI_enu_SetCallBack+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <EXTI_enu_SetCallBack+0x8>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <EXTI_enu_SetCallBack+0xa>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	7c 83       	std	Y+4, r23	; 0x04
     f36:	6b 83       	std	Y+3, r22	; 0x03
     f38:	5e 83       	std	Y+6, r21	; 0x06
     f3a:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	d1 f0       	breq	.+52     	; 0xf7c <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	2b 81       	ldd	r18, Y+3	; 0x03
     f50:	3c 81       	ldd	r19, Y+4	; 0x04
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	fc 01       	movw	r30, r24
     f58:	ee 57       	subi	r30, 0x7E	; 126
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	31 83       	std	Z+1, r19	; 0x01
     f5e:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	fc 01       	movw	r30, r24
     f6c:	e8 57       	subi	r30, 0x78	; 120
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	26 96       	adiw	r28, 0x06	; 6
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	11 24       	eor	r1, r1
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
     fbe:	80 91 82 01 	lds	r24, 0x0182
     fc2:	90 91 83 01 	lds	r25, 0x0183
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	49 f0       	breq	.+18     	; 0xfdc <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
     fca:	e0 91 82 01 	lds	r30, 0x0182
     fce:	f0 91 83 01 	lds	r31, 0x0183
     fd2:	80 91 88 01 	lds	r24, 0x0188
     fd6:	90 91 89 01 	lds	r25, 0x0189
     fda:	09 95       	icall
    }
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_2>:
//INT1
void __vector_2 (void)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    102c:	80 91 84 01 	lds	r24, 0x0184
    1030:	90 91 85 01 	lds	r25, 0x0185
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	49 f0       	breq	.+18     	; 0x104a <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    1038:	e0 91 84 01 	lds	r30, 0x0184
    103c:	f0 91 85 01 	lds	r31, 0x0185
    1040:	80 91 8a 01 	lds	r24, 0x018A
    1044:	90 91 8b 01 	lds	r25, 0x018B
    1048:	09 95       	icall
    }
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_3>:
//INT2
void __vector_3 (void)
{
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    109a:	80 91 86 01 	lds	r24, 0x0186
    109e:	90 91 87 01 	lds	r25, 0x0187
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	39 f0       	breq	.+14     	; 0x10b4 <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    10a6:	e0 91 86 01 	lds	r30, 0x0186
    10aa:	f0 91 87 01 	lds	r31, 0x0187
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	09 95       	icall
    }
    
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <enu_SetMode+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <enu_SetMode+0x8>
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3d 83       	std	Y+5, r19	; 0x05
    10f8:	2c 83       	std	Y+4, r18	; 0x04
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	29 f1       	breq	.+74     	; 0x114e <enu_SetMode+0x74>
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	d9 f1       	breq	.+118    	; 0x1184 <enu_SetMode+0xaa>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	09 f0       	breq	.+2      	; 0x1118 <enu_SetMode+0x3e>
    1116:	51 c0       	rjmp	.+162    	; 0x11ba <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	49 f4       	brne	.+18     	; 0x1130 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    111e:	ab e5       	ldi	r26, 0x5B	; 91
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e5       	ldi	r30, 0x5B	; 91
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	47 c0       	rjmp	.+142    	; 0x11be <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 23       	and	r24, r24
    1134:	49 f4       	brne	.+18     	; 0x1148 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    1136:	ab e5       	ldi	r26, 0x5B	; 91
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e5       	ldi	r30, 0x5B	; 91
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8f 7b       	andi	r24, 0xBF	; 191
    1142:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	3b c0       	rjmp	.+118    	; 0x11be <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	38 c0       	rjmp	.+112    	; 0x11be <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	49 f4       	brne	.+18     	; 0x1166 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    1154:	ab e5       	ldi	r26, 0x5B	; 91
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	eb e5       	ldi	r30, 0x5B	; 91
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	2c c0       	rjmp	.+88     	; 0x11be <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 23       	and	r24, r24
    116a:	49 f4       	brne	.+18     	; 0x117e <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    116c:	ab e5       	ldi	r26, 0x5B	; 91
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	eb e5       	ldi	r30, 0x5B	; 91
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8f 77       	andi	r24, 0x7F	; 127
    1178:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    117a:	19 82       	std	Y+1, r1	; 0x01
    117c:	20 c0       	rjmp	.+64     	; 0x11be <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	1d c0       	rjmp	.+58     	; 0x11be <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	49 f4       	brne	.+18     	; 0x119c <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    118a:	ab e5       	ldi	r26, 0x5B	; 91
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	eb e5       	ldi	r30, 0x5B	; 91
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 62       	ori	r24, 0x20	; 32
    1196:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	11 c0       	rjmp	.+34     	; 0x11be <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 23       	and	r24, r24
    11a0:	49 f4       	brne	.+18     	; 0x11b4 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    11a2:	ab e5       	ldi	r26, 0x5B	; 91
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e5       	ldi	r30, 0x5B	; 91
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7d       	andi	r24, 0xDF	; 223
    11ae:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    11b0:	19 82       	std	Y+1, r1	; 0x01
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    11be:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <enu_SetSenseLevel+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <enu_SetSenseLevel+0x8>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	e9 f1       	breq	.+122    	; 0x1274 <enu_SetSenseLevel+0xa4>
    11fa:	2c 81       	ldd	r18, Y+4	; 0x04
    11fc:	3d 81       	ldd	r19, Y+5	; 0x05
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <enu_SetSenseLevel+0x36>
    1204:	69 c0       	rjmp	.+210    	; 0x12d8 <enu_SetSenseLevel+0x108>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <enu_SetSenseLevel+0x40>
    120e:	7c c0       	rjmp	.+248    	; 0x1308 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8c 7f       	andi	r24, 0xFC	; 252
    121c:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 23       	and	r24, r24
    1222:	11 f4       	brne	.+4      	; 0x1228 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    1224:	19 82       	std	Y+1, r1	; 0x01
    1226:	72 c0       	rjmp	.+228    	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	49 f4       	brne	.+18     	; 0x1240 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    122e:	a5 e5       	ldi	r26, 0x55	; 85
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e5 e5       	ldi	r30, 0x55	; 85
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	66 c0       	rjmp	.+204    	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	41 f4       	brne	.+16     	; 0x1256 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    1246:	a5 e5       	ldi	r26, 0x55	; 85
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e5 e5       	ldi	r30, 0x55	; 85
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	82 60       	ori	r24, 0x02	; 2
    1252:	8c 93       	st	X, r24
    1254:	5b c0       	rjmp	.+182    	; 0x130c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	49 f4       	brne	.+18     	; 0x126e <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	83 60       	ori	r24, 0x03	; 3
    1268:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	4f c0       	rjmp	.+158    	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	4c c0       	rjmp	.+152    	; 0x130c <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    1274:	a5 e5       	ldi	r26, 0x55	; 85
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e5       	ldi	r30, 0x55	; 85
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	83 7f       	andi	r24, 0xF3	; 243
    1280:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 23       	and	r24, r24
    1286:	11 f4       	brne	.+4      	; 0x128c <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    1288:	19 82       	std	Y+1, r1	; 0x01
    128a:	40 c0       	rjmp	.+128    	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	49 f4       	brne	.+18     	; 0x12a4 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    1292:	a5 e5       	ldi	r26, 0x55	; 85
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e5       	ldi	r30, 0x55	; 85
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	84 60       	ori	r24, 0x04	; 4
    129e:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	34 c0       	rjmp	.+104    	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	41 f4       	brne	.+16     	; 0x12ba <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    12aa:	a5 e5       	ldi	r26, 0x55	; 85
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e5       	ldi	r30, 0x55	; 85
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	8c 93       	st	X, r24
    12b8:	29 c0       	rjmp	.+82     	; 0x130c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	49 f4       	brne	.+18     	; 0x12d2 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    12c0:	a5 e5       	ldi	r26, 0x55	; 85
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e5       	ldi	r30, 0x55	; 85
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8c 60       	ori	r24, 0x0C	; 12
    12cc:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12ce:	19 82       	std	Y+1, r1	; 0x01
    12d0:	1d c0       	rjmp	.+58     	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	1a c0       	rjmp	.+52     	; 0x130c <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	49 f4       	brne	.+18     	; 0x12f0 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    12de:	a4 e5       	ldi	r26, 0x54	; 84
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e4 e5       	ldi	r30, 0x54	; 84
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 7b       	andi	r24, 0xBF	; 191
    12ea:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	59 f4       	brne	.+22     	; 0x130c <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    12f6:	a4 e5       	ldi	r26, 0x54	; 84
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e4 e5       	ldi	r30, 0x54	; 84
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	02 c0       	rjmp	.+4      	; 0x130c <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <enu_SetFlagValue+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <enu_SetFlagValue+0x8>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3d 83       	std	Y+5, r19	; 0x05
    133c:	2c 83       	std	Y+4, r18	; 0x04
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	c1 f0       	breq	.+48     	; 0x1378 <enu_SetFlagValue+0x5a>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	11 f1       	breq	.+68     	; 0x1396 <enu_SetFlagValue+0x78>
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	69 f5       	brne	.+90     	; 0x13b4 <enu_SetFlagValue+0x96>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	49 f4       	brne	.+18     	; 0x1372 <enu_SetFlagValue+0x54>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    1360:	aa e5       	ldi	r26, 0x5A	; 90
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea e5       	ldi	r30, 0x5A	; 90
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 64       	ori	r24, 0x40	; 64
    136c:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    136e:	19 82       	std	Y+1, r1	; 0x01
    1370:	23 c0       	rjmp	.+70     	; 0x13b8 <enu_SetFlagValue+0x9a>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	20 c0       	rjmp	.+64     	; 0x13b8 <enu_SetFlagValue+0x9a>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	49 f4       	brne	.+18     	; 0x1390 <enu_SetFlagValue+0x72>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    137e:	aa e5       	ldi	r26, 0x5A	; 90
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea e5       	ldi	r30, 0x5A	; 90
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    138c:	19 82       	std	Y+1, r1	; 0x01
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <enu_SetFlagValue+0x9a>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <enu_SetFlagValue+0x9a>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	49 f4       	brne	.+18     	; 0x13ae <enu_SetFlagValue+0x90>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    139c:	aa e5       	ldi	r26, 0x5A	; 90
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ea e5       	ldi	r30, 0x5A	; 90
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	80 62       	ori	r24, 0x20	; 32
    13a8:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <enu_SetFlagValue+0x9a>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <enu_SetFlagValue+0x9a>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    13d8:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    13da:	89 81       	ldd	r24, Y+1	; 0x01
}
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <DIO_enu_SetPinDiretion+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <DIO_enu_SetPinDiretion+0x8>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <DIO_enu_SetPinDiretion+0xa>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	8a 83       	std	Y+2, r24	; 0x02
    13f4:	6b 83       	std	Y+3, r22	; 0x03
    13f6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	08 f0       	brcs	.+2      	; 0x1404 <DIO_enu_SetPinDiretion+0x20>
    1402:	d0 c0       	rjmp	.+416    	; 0x15a4 <DIO_enu_SetPinDiretion+0x1c0>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 30       	cpi	r24, 0x08	; 8
    1408:	08 f0       	brcs	.+2      	; 0x140c <DIO_enu_SetPinDiretion+0x28>
    140a:	cc c0       	rjmp	.+408    	; 0x15a4 <DIO_enu_SetPinDiretion+0x1c0>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	08 f0       	brcs	.+2      	; 0x1414 <DIO_enu_SetPinDiretion+0x30>
    1412:	c8 c0       	rjmp	.+400    	; 0x15a4 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3e 83       	std	Y+6, r19	; 0x06
    141c:	2d 83       	std	Y+5, r18	; 0x05
    141e:	6d 81       	ldd	r22, Y+5	; 0x05
    1420:	7e 81       	ldd	r23, Y+6	; 0x06
    1422:	61 30       	cpi	r22, 0x01	; 1
    1424:	71 05       	cpc	r23, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <DIO_enu_SetPinDiretion+0x46>
    1428:	41 c0       	rjmp	.+130    	; 0x14ac <DIO_enu_SetPinDiretion+0xc8>
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	34 f4       	brge	.+12     	; 0x1440 <DIO_enu_SetPinDiretion+0x5c>
    1434:	2d 81       	ldd	r18, Y+5	; 0x05
    1436:	3e 81       	ldd	r19, Y+6	; 0x06
    1438:	21 15       	cp	r18, r1
    143a:	31 05       	cpc	r19, r1
    143c:	71 f0       	breq	.+28     	; 0x145a <DIO_enu_SetPinDiretion+0x76>
    143e:	b0 c0       	rjmp	.+352    	; 0x15a0 <DIO_enu_SetPinDiretion+0x1bc>
    1440:	6d 81       	ldd	r22, Y+5	; 0x05
    1442:	7e 81       	ldd	r23, Y+6	; 0x06
    1444:	62 30       	cpi	r22, 0x02	; 2
    1446:	71 05       	cpc	r23, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <DIO_enu_SetPinDiretion+0x68>
    144a:	59 c0       	rjmp	.+178    	; 0x14fe <DIO_enu_SetPinDiretion+0x11a>
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <DIO_enu_SetPinDiretion+0x74>
    1456:	7c c0       	rjmp	.+248    	; 0x1550 <DIO_enu_SetPinDiretion+0x16c>
    1458:	a3 c0       	rjmp	.+326    	; 0x15a0 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    145a:	aa e3       	ldi	r26, 0x3A	; 58
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ea e3       	ldi	r30, 0x3A	; 58
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_enu_SetPinDiretion+0x92>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	2a 95       	dec	r18
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_enu_SetPinDiretion+0x8e>
    147a:	80 95       	com	r24
    147c:	84 23       	and	r24, r20
    147e:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1480:	aa e3       	ldi	r26, 0x3A	; 58
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ea e3       	ldi	r30, 0x3A	; 58
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	b9 01       	movw	r22, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_enu_SetPinDiretion+0xbc>
    149c:	66 0f       	add	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_enu_SetPinDiretion+0xb8>
    14a4:	cb 01       	movw	r24, r22
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	7a c0       	rjmp	.+244    	; 0x15a0 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_enu_SetPinDiretion+0xe4>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	2a 95       	dec	r18
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_enu_SetPinDiretion+0xe0>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    14d2:	a7 e3       	ldi	r26, 0x37	; 55
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e7 e3       	ldi	r30, 0x37	; 55
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	b9 01       	movw	r22, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_enu_SetPinDiretion+0x10e>
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_enu_SetPinDiretion+0x10a>
    14f6:	cb 01       	movw	r24, r22
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	51 c0       	rjmp	.+162    	; 0x15a0 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    14fe:	a4 e3       	ldi	r26, 0x34	; 52
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e4 e3       	ldi	r30, 0x34	; 52
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_enu_SetPinDiretion+0x136>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	2a 95       	dec	r18
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_enu_SetPinDiretion+0x132>
    151e:	80 95       	com	r24
    1520:	84 23       	and	r24, r20
    1522:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1524:	a4 e3       	ldi	r26, 0x34	; 52
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_enu_SetPinDiretion+0x160>
    1540:	66 0f       	add	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_enu_SetPinDiretion+0x15c>
    1548:	cb 01       	movw	r24, r22
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	28 c0       	rjmp	.+80     	; 0x15a0 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    1550:	a1 e3       	ldi	r26, 0x31	; 49
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_enu_SetPinDiretion+0x188>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	2a 95       	dec	r18
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_enu_SetPinDiretion+0x184>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1576:	a1 e3       	ldi	r26, 0x31	; 49
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 e3       	ldi	r30, 0x31	; 49
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	b9 01       	movw	r22, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_enu_SetPinDiretion+0x1b2>
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	8a 95       	dec	r24
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_enu_SetPinDiretion+0x1ae>
    159a:	cb 01       	movw	r24, r22
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	26 96       	adiw	r28, 0x06	; 6
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_enu_SetPinState+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_enu_SetPinState+0x8>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <DIO_enu_SetPinState+0xa>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	6b 83       	std	Y+3, r22	; 0x03
    15ce:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	08 f0       	brcs	.+2      	; 0x15dc <DIO_enu_SetPinState+0x20>
    15da:	d0 c0       	rjmp	.+416    	; 0x177c <DIO_enu_SetPinState+0x1c0>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 30       	cpi	r24, 0x08	; 8
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <DIO_enu_SetPinState+0x28>
    15e2:	cc c0       	rjmp	.+408    	; 0x177c <DIO_enu_SetPinState+0x1c0>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <DIO_enu_SetPinState+0x30>
    15ea:	c8 c0       	rjmp	.+400    	; 0x177c <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3e 83       	std	Y+6, r19	; 0x06
    15f4:	2d 83       	std	Y+5, r18	; 0x05
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	61 30       	cpi	r22, 0x01	; 1
    15fc:	71 05       	cpc	r23, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <DIO_enu_SetPinState+0x46>
    1600:	41 c0       	rjmp	.+130    	; 0x1684 <DIO_enu_SetPinState+0xc8>
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	91 05       	cpc	r25, r1
    160a:	34 f4       	brge	.+12     	; 0x1618 <DIO_enu_SetPinState+0x5c>
    160c:	2d 81       	ldd	r18, Y+5	; 0x05
    160e:	3e 81       	ldd	r19, Y+6	; 0x06
    1610:	21 15       	cp	r18, r1
    1612:	31 05       	cpc	r19, r1
    1614:	71 f0       	breq	.+28     	; 0x1632 <DIO_enu_SetPinState+0x76>
    1616:	b0 c0       	rjmp	.+352    	; 0x1778 <DIO_enu_SetPinState+0x1bc>
    1618:	6d 81       	ldd	r22, Y+5	; 0x05
    161a:	7e 81       	ldd	r23, Y+6	; 0x06
    161c:	62 30       	cpi	r22, 0x02	; 2
    161e:	71 05       	cpc	r23, r1
    1620:	09 f4       	brne	.+2      	; 0x1624 <DIO_enu_SetPinState+0x68>
    1622:	59 c0       	rjmp	.+178    	; 0x16d6 <DIO_enu_SetPinState+0x11a>
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <DIO_enu_SetPinState+0x74>
    162e:	7c c0       	rjmp	.+248    	; 0x1728 <DIO_enu_SetPinState+0x16c>
    1630:	a3 c0       	rjmp	.+326    	; 0x1778 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    1632:	ab e3       	ldi	r26, 0x3B	; 59
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	eb e3       	ldi	r30, 0x3B	; 59
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_enu_SetPinState+0x92>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	2a 95       	dec	r18
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_enu_SetPinState+0x8e>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1658:	ab e3       	ldi	r26, 0x3B	; 59
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	eb e3       	ldi	r30, 0x3B	; 59
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b9 01       	movw	r22, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_enu_SetPinState+0xbc>
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	8a 95       	dec	r24
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_enu_SetPinState+0xb8>
    167c:	cb 01       	movw	r24, r22
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	7a c0       	rjmp	.+244    	; 0x1778 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    1684:	a8 e3       	ldi	r26, 0x38	; 56
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e3       	ldi	r30, 0x38	; 56
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_enu_SetPinState+0xe4>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	2a 95       	dec	r18
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_enu_SetPinState+0xe0>
    16a4:	80 95       	com	r24
    16a6:	84 23       	and	r24, r20
    16a8:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	b9 01       	movw	r22, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_enu_SetPinState+0x10e>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_enu_SetPinState+0x10a>
    16ce:	cb 01       	movw	r24, r22
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	51 c0       	rjmp	.+162    	; 0x1778 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    16d6:	a5 e3       	ldi	r26, 0x35	; 53
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_enu_SetPinState+0x136>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	2a 95       	dec	r18
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_enu_SetPinState+0x132>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    16fc:	a5 e3       	ldi	r26, 0x35	; 53
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e3       	ldi	r30, 0x35	; 53
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	b9 01       	movw	r22, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enu_SetPinState+0x160>
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	8a 95       	dec	r24
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_enu_SetPinState+0x15c>
    1720:	cb 01       	movw	r24, r22
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	28 c0       	rjmp	.+80     	; 0x1778 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_enu_SetPinState+0x188>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	2a 95       	dec	r18
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_enu_SetPinState+0x184>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    174e:	a2 e3       	ldi	r26, 0x32	; 50
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e2 e3       	ldi	r30, 0x32	; 50
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	b9 01       	movw	r22, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_enu_SetPinState+0x1b2>
    176a:	66 0f       	add	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_enu_SetPinState+0x1ae>
    1772:	cb 01       	movw	r24, r22
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	26 96       	adiw	r28, 0x06	; 6
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <DIO_enu_SetPinValue+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_enu_SetPinValue+0x8>
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_enu_SetPinValue+0xa>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8a 83       	std	Y+2, r24	; 0x02
    17a4:	6b 83       	std	Y+3, r22	; 0x03
    17a6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <DIO_enu_SetPinValue+0x20>
    17b2:	db c0       	rjmp	.+438    	; 0x196a <DIO_enu_SetPinValue+0x1d6>
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	88 30       	cpi	r24, 0x08	; 8
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <DIO_enu_SetPinValue+0x28>
    17ba:	d7 c0       	rjmp	.+430    	; 0x196a <DIO_enu_SetPinValue+0x1d6>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	82 30       	cpi	r24, 0x02	; 2
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <DIO_enu_SetPinValue+0x30>
    17c2:	d3 c0       	rjmp	.+422    	; 0x196a <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3e 83       	std	Y+6, r19	; 0x06
    17cc:	2d 83       	std	Y+5, r18	; 0x05
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <DIO_enu_SetPinValue+0x46>
    17d8:	43 c0       	rjmp	.+134    	; 0x1860 <DIO_enu_SetPinValue+0xcc>
    17da:	2d 81       	ldd	r18, Y+5	; 0x05
    17dc:	3e 81       	ldd	r19, Y+6	; 0x06
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	2c f4       	brge	.+10     	; 0x17ee <DIO_enu_SetPinValue+0x5a>
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	71 f0       	breq	.+28     	; 0x1808 <DIO_enu_SetPinValue+0x74>
    17ec:	bc c0       	rjmp	.+376    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
    17ee:	2d 81       	ldd	r18, Y+5	; 0x05
    17f0:	3e 81       	ldd	r19, Y+6	; 0x06
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_enu_SetPinValue+0x66>
    17f8:	5f c0       	rjmp	.+190    	; 0x18b8 <DIO_enu_SetPinValue+0x124>
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <DIO_enu_SetPinValue+0x72>
    1804:	85 c0       	rjmp	.+266    	; 0x1910 <DIO_enu_SetPinValue+0x17c>
    1806:	af c0       	rjmp	.+350    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	a1 f4       	brne	.+40     	; 0x1836 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    180e:	ab e3       	ldi	r26, 0x3B	; 59
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	eb e3       	ldi	r30, 0x3B	; 59
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_enu_SetPinValue+0x98>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_enu_SetPinValue+0x94>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	98 c0       	rjmp	.+304    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    1836:	ab e3       	ldi	r26, 0x3B	; 59
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_enu_SetPinValue+0xc0>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_enu_SetPinValue+0xbc>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	83 c0       	rjmp	.+262    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	a1 f4       	brne	.+40     	; 0x188e <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    1866:	a8 e3       	ldi	r26, 0x38	; 56
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e8 e3       	ldi	r30, 0x38	; 56
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_enu_SetPinValue+0xf0>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_enu_SetPinValue+0xec>
    1888:	84 2b       	or	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	6c c0       	rjmp	.+216    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_enu_SetPinValue+0x118>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_enu_SetPinValue+0x114>
    18b0:	80 95       	com	r24
    18b2:	84 23       	and	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	57 c0       	rjmp	.+174    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	a1 f4       	brne	.+40     	; 0x18e6 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    18be:	a5 e3       	ldi	r26, 0x35	; 53
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e3       	ldi	r30, 0x35	; 53
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_enu_SetPinValue+0x148>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_enu_SetPinValue+0x144>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	40 c0       	rjmp	.+128    	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    18e6:	a5 e3       	ldi	r26, 0x35	; 53
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_enu_SetPinValue+0x170>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_enu_SetPinValue+0x16c>
    1908:	80 95       	com	r24
    190a:	84 23       	and	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	2b c0       	rjmp	.+86     	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	a1 f4       	brne	.+40     	; 0x193e <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    1916:	a2 e3       	ldi	r26, 0x32	; 50
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e2 e3       	ldi	r30, 0x32	; 50
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_enu_SetPinValue+0x1a0>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_enu_SetPinValue+0x19c>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    193e:	a2 e3       	ldi	r26, 0x32	; 50
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e2 e3       	ldi	r30, 0x32	; 50
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_enu_SetPinValue+0x1c8>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_enu_SetPinValue+0x1c4>
    1960:	80 95       	com	r24
    1962:	84 23       	and	r24, r20
    1964:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1966:	19 82       	std	Y+1, r1	; 0x01
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    196e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1970:	26 96       	adiw	r28, 0x06	; 6
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <DIO_enu_TogglePinValue+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <DIO_enu_TogglePinValue+0x8>
    198a:	0f 92       	push	r0
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	8a 83       	std	Y+2, r24	; 0x02
    1992:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	84 30       	cpi	r24, 0x04	; 4
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <DIO_enu_TogglePinValue+0x1e>
    199e:	73 c0       	rjmp	.+230    	; 0x1a86 <DIO_enu_TogglePinValue+0x104>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 30       	cpi	r24, 0x08	; 8
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <DIO_enu_TogglePinValue+0x26>
    19a6:	6f c0       	rjmp	.+222    	; 0x1a86 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3d 83       	std	Y+5, r19	; 0x05
    19b0:	2c 83       	std	Y+4, r18	; 0x04
    19b2:	8c 81       	ldd	r24, Y+4	; 0x04
    19b4:	9d 81       	ldd	r25, Y+5	; 0x05
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	91 05       	cpc	r25, r1
    19ba:	49 f1       	breq	.+82     	; 0x1a0e <DIO_enu_TogglePinValue+0x8c>
    19bc:	2c 81       	ldd	r18, Y+4	; 0x04
    19be:	3d 81       	ldd	r19, Y+5	; 0x05
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <DIO_enu_TogglePinValue+0x4e>
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <DIO_enu_TogglePinValue+0x64>
    19ce:	5a c0       	rjmp	.+180    	; 0x1a84 <DIO_enu_TogglePinValue+0x102>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	71 f1       	breq	.+92     	; 0x1a36 <DIO_enu_TogglePinValue+0xb4>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	e9 f1       	breq	.+122    	; 0x1a5e <DIO_enu_TogglePinValue+0xdc>
    19e4:	4f c0       	rjmp	.+158    	; 0x1a84 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    19e6:	ab e3       	ldi	r26, 0x3B	; 59
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	eb e3       	ldi	r30, 0x3B	; 59
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_enu_TogglePinValue+0x82>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_enu_TogglePinValue+0x7e>
    1a08:	84 27       	eor	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	3b c0       	rjmp	.+118    	; 0x1a84 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    1a0e:	a8 e3       	ldi	r26, 0x38	; 56
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e8 e3       	ldi	r30, 0x38	; 56
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_enu_TogglePinValue+0xaa>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_enu_TogglePinValue+0xa6>
    1a30:	84 27       	eor	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	27 c0       	rjmp	.+78     	; 0x1a84 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    1a36:	a5 e3       	ldi	r26, 0x35	; 53
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e3       	ldi	r30, 0x35	; 53
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_enu_TogglePinValue+0xd2>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_enu_TogglePinValue+0xce>
    1a58:	84 27       	eor	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    1a5e:	a2 e3       	ldi	r26, 0x32	; 50
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e2 e3       	ldi	r30, 0x32	; 50
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_enu_TogglePinValue+0xfa>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_enu_TogglePinValue+0xf6>
    1a80:	84 27       	eor	r24, r20
    1a82:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1a84:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	27 97       	sbiw	r28, 0x07	; 7
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	8a 83       	std	Y+2, r24	; 0x02
    1aae:	6b 83       	std	Y+3, r22	; 0x03
    1ab0:	5d 83       	std	Y+5, r21	; 0x05
    1ab2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <DIO_enu_GetPinValue+0x2a>
    1ac0:	7d c0       	rjmp	.+250    	; 0x1bbc <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <DIO_enu_GetPinValue+0x32>
    1ac8:	76 c0       	rjmp	.+236    	; 0x1bb6 <DIO_enu_GetPinValue+0x11e>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 30       	cpi	r24, 0x08	; 8
    1ace:	08 f0       	brcs	.+2      	; 0x1ad2 <DIO_enu_GetPinValue+0x3a>
    1ad0:	72 c0       	rjmp	.+228    	; 0x1bb6 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	3f 83       	std	Y+7, r19	; 0x07
    1ada:	2e 83       	std	Y+6, r18	; 0x06
    1adc:	4e 81       	ldd	r20, Y+6	; 0x06
    1ade:	5f 81       	ldd	r21, Y+7	; 0x07
    1ae0:	41 30       	cpi	r20, 0x01	; 1
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	59 f1       	breq	.+86     	; 0x1b3c <DIO_enu_GetPinValue+0xa4>
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	91 05       	cpc	r25, r1
    1aee:	34 f4       	brge	.+12     	; 0x1afc <DIO_enu_GetPinValue+0x64>
    1af0:	2e 81       	ldd	r18, Y+6	; 0x06
    1af2:	3f 81       	ldd	r19, Y+7	; 0x07
    1af4:	21 15       	cp	r18, r1
    1af6:	31 05       	cpc	r19, r1
    1af8:	69 f0       	breq	.+26     	; 0x1b14 <DIO_enu_GetPinValue+0x7c>
    1afa:	5b c0       	rjmp	.+182    	; 0x1bb2 <DIO_enu_GetPinValue+0x11a>
    1afc:	4e 81       	ldd	r20, Y+6	; 0x06
    1afe:	5f 81       	ldd	r21, Y+7	; 0x07
    1b00:	42 30       	cpi	r20, 0x02	; 2
    1b02:	51 05       	cpc	r21, r1
    1b04:	79 f1       	breq	.+94     	; 0x1b64 <DIO_enu_GetPinValue+0xcc>
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <DIO_enu_GetPinValue+0x7a>
    1b10:	3d c0       	rjmp	.+122    	; 0x1b8c <DIO_enu_GetPinValue+0xf4>
    1b12:	4f c0       	rjmp	.+158    	; 0x1bb2 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    1b14:	e9 e3       	ldi	r30, 0x39	; 57
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_enu_GetPinValue+0x94>
    1b28:	55 95       	asr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	8a 95       	dec	r24
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_enu_GetPinValue+0x90>
    1b30:	ca 01       	movw	r24, r20
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	ec 81       	ldd	r30, Y+4	; 0x04
    1b36:	fd 81       	ldd	r31, Y+5	; 0x05
    1b38:	80 83       	st	Z, r24
    1b3a:	3b c0       	rjmp	.+118    	; 0x1bb2 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    1b3c:	e6 e3       	ldi	r30, 0x36	; 54
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a9 01       	movw	r20, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_enu_GetPinValue+0xbc>
    1b50:	55 95       	asr	r21
    1b52:	47 95       	ror	r20
    1b54:	8a 95       	dec	r24
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_enu_GetPinValue+0xb8>
    1b58:	ca 01       	movw	r24, r20
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b60:	80 83       	st	Z, r24
    1b62:	27 c0       	rjmp	.+78     	; 0x1bb2 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    1b64:	e3 e3       	ldi	r30, 0x33	; 51
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a9 01       	movw	r20, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_enu_GetPinValue+0xe4>
    1b78:	55 95       	asr	r21
    1b7a:	47 95       	ror	r20
    1b7c:	8a 95       	dec	r24
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <DIO_enu_GetPinValue+0xe0>
    1b80:	ca 01       	movw	r24, r20
    1b82:	81 70       	andi	r24, 0x01	; 1
    1b84:	ec 81       	ldd	r30, Y+4	; 0x04
    1b86:	fd 81       	ldd	r31, Y+5	; 0x05
    1b88:	80 83       	st	Z, r24
    1b8a:	13 c0       	rjmp	.+38     	; 0x1bb2 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    1b8c:	e0 e3       	ldi	r30, 0x30	; 48
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_enu_GetPinValue+0x10c>
    1ba0:	55 95       	asr	r21
    1ba2:	47 95       	ror	r20
    1ba4:	8a 95       	dec	r24
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_enu_GetPinValue+0x108>
    1ba8:	ca 01       	movw	r24, r20
    1baa:	81 70       	andi	r24, 0x01	; 1
    1bac:	ec 81       	ldd	r30, Y+4	; 0x04
    1bae:	fd 81       	ldd	r31, Y+5	; 0x05
    1bb0:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc2:	27 96       	adiw	r28, 0x07	; 7
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <SW_enu_Initialization+0x6>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <SW_enu_Initialization+0x8>
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    1be0:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    1be2:	1b 82       	std	Y+3, r1	; 0x03
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	53 c0       	rjmp	.+166    	; 0x1c92 <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	82 0f       	add	r24, r18
    1bfa:	93 1f       	adc	r25, r19
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e5 58       	subi	r30, 0x85	; 133
    1c00:	fe 4f       	sbci	r31, 0xFE	; 254
    1c02:	40 81       	ld	r20, Z
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
    1c14:	fc 01       	movw	r30, r24
    1c16:	e4 58       	subi	r30, 0x84	; 132
    1c18:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1a:	90 81       	ld	r25, Z
    1c1c:	84 2f       	mov	r24, r20
    1c1e:	69 2f       	mov	r22, r25
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
    1c26:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	c9 01       	movw	r24, r18
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	fc 01       	movw	r30, r24
    1c3a:	e5 58       	subi	r30, 0x85	; 133
    1c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3e:	50 81       	ld	r21, Z
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	c9 01       	movw	r24, r18
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	82 0f       	add	r24, r18
    1c4e:	93 1f       	adc	r25, r19
    1c50:	fc 01       	movw	r30, r24
    1c52:	e4 58       	subi	r30, 0x84	; 132
    1c54:	fe 4f       	sbci	r31, 0xFE	; 254
    1c56:	40 81       	ld	r20, Z
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	c9 01       	movw	r24, r18
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	fc 01       	movw	r30, r24
    1c6a:	e3 58       	subi	r30, 0x83	; 131
    1c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6e:	90 81       	ld	r25, Z
    1c70:	85 2f       	mov	r24, r21
    1c72:	64 2f       	mov	r22, r20
    1c74:	49 2f       	mov	r20, r25
    1c76:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_enu_SetPinState>
    1c7a:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	19 f0       	breq	.+6      	; 0x1c88 <SW_enu_Initialization+0xb4>
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	8f 5f       	subi	r24, 0xFF	; 255
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	90 91 7a 01 	lds	r25, 0x017A
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	89 17       	cp	r24, r25
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <SW_enu_Initialization+0xca>
    1c9c:	a7 cf       	rjmp	.-178    	; 0x1bec <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <SW_enu_GetSwValue+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <SW_enu_GetSwValue+0x8>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	7c 83       	std	Y+4, r23	; 0x04
    1cbe:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	49 f1       	breq	.+82     	; 0x1d1e <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    1ccc:	90 91 7a 01 	lds	r25, 0x017A
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	98 17       	cp	r25, r24
    1cd4:	08 f1       	brcs	.+66     	; 0x1d18 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	c9 01       	movw	r24, r18
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e5 58       	subi	r30, 0x85	; 133
    1cea:	fe 4f       	sbci	r31, 0xFE	; 254
    1cec:	40 81       	ld	r20, Z
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	fc 01       	movw	r30, r24
    1d00:	e4 58       	subi	r30, 0x84	; 132
    1d02:	fe 4f       	sbci	r31, 0xFE	; 254
    1d04:	90 81       	ld	r25, Z
    1d06:	2b 81       	ldd	r18, Y+3	; 0x03
    1d08:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0a:	84 2f       	mov	r24, r20
    1d0c:	69 2f       	mov	r22, r25
    1d0e:	a9 01       	movw	r20, r18
    1d10:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <DIO_enu_GetPinValue>
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	05 c0       	rjmp	.+10     	; 0x1d22 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	6d 97       	sbiw	r28, 0x1d	; 29
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	ac e0       	ldi	r26, 0x0C	; 12
    1d50:	b2 e4       	ldi	r27, 0x42	; 66
    1d52:	89 8f       	std	Y+25, r24	; 0x19
    1d54:	9a 8f       	std	Y+26, r25	; 0x1a
    1d56:	ab 8f       	std	Y+27, r26	; 0x1b
    1d58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a e7       	ldi	r20, 0x7A	; 122
    1d68:	55 e4       	ldi	r21, 0x45	; 69
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8d 8b       	std	Y+21, r24	; 0x15
    1d74:	9e 8b       	std	Y+22, r25	; 0x16
    1d76:	af 8b       	std	Y+23, r26	; 0x17
    1d78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	69 8d       	ldd	r22, Y+25	; 0x19
    1db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_enu_Initialization+0xca>
    1dde:	80 e9       	ldi	r24, 0x90	; 144
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	9a 8b       	std	Y+18, r25	; 0x12
    1de4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
    1de8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_enu_Initialization+0xb8>
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_enu_Initialization+0xac>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	98 8b       	std	Y+16, r25	; 0x10
    1e20:	8f 87       	std	Y+15, r24	; 0x0f
    1e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e24:	98 89       	ldd	r25, Y+16	; 0x10
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_enu_Initialization+0xf4>
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
    _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	61 e0       	ldi	r22, 0x01	; 1
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	62 e0       	ldi	r22, 0x02	; 2
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	63 e0       	ldi	r22, 0x03	; 3
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	67 e0       	ldi	r22, 0x07	; 7
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	66 e0       	ldi	r22, 0x06	; 6
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	65 e0       	ldi	r22, 0x05	; 5
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	67 e0       	ldi	r22, 0x07	; 7
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	66 e0       	ldi	r22, 0x06	; 6
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	64 e0       	ldi	r22, 0x04	; 4
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e8       	ldi	r26, 0x80	; 128
    1eb6:	bf e3       	ldi	r27, 0x3F	; 63
    1eb8:	8b 87       	std	Y+11, r24	; 0x0b
    1eba:	9c 87       	std	Y+12, r25	; 0x0c
    1ebc:	ad 87       	std	Y+13, r26	; 0x0d
    1ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a e7       	ldi	r20, 0x7A	; 122
    1ece:	55 e4       	ldi	r21, 0x45	; 69
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8f 83       	std	Y+7, r24	; 0x07
    1eda:	98 87       	std	Y+8, r25	; 0x08
    1edc:	a9 87       	std	Y+9, r26	; 0x09
    1ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_enu_Initialization+0x230>
    1f44:	80 e9       	ldi	r24, 0x90	; 144
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_enu_Initialization+0x21e>
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_enu_Initialization+0x212>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_enu_Initialization+0x25a>
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    1fa8:	88 e2       	ldi	r24, 0x28	; 40
    1faa:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0C);
    1fb8:	8c e0       	ldi	r24, 0x0C	; 12
    1fba:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    1fd8:	86 e0       	ldi	r24, 0x06	; 6
    1fda:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    1fde:	1d 8e       	std	Y+29, r1	; 0x1d

    return Local_u8_ErrorFlag;
    1fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1fe2:	6d 96       	adiw	r28, 0x1d	; 29
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <LCD_enu_SendCommand+0x6>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    2014:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    2016:	89 81       	ldd	r24, Y+1	; 0x01

}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <LCD_enu_SendData+0x6>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    2042:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2044:	89 81       	ldd	r24, Y+1	; 0x01

}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <LCD_enu_GoToPosition+0x6>
    2056:	00 d0       	rcall	.+0      	; 0x2058 <LCD_enu_GoToPosition+0x8>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	8a 83       	std	Y+2, r24	; 0x02
    205e:	6b 83       	std	Y+3, r22	; 0x03
    2060:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	81 31       	cpi	r24, 0x11	; 17
    206a:	88 f5       	brcc	.+98     	; 0x20ce <LCD_enu_GoToPosition+0x7e>
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	88 23       	and	r24, r24
    2070:	71 f1       	breq	.+92     	; 0x20ce <LCD_enu_GoToPosition+0x7e>
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	58 f5       	brcc	.+86     	; 0x20ce <LCD_enu_GoToPosition+0x7e>
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	88 23       	and	r24, r24
    207c:	41 f1       	breq	.+80     	; 0x20ce <LCD_enu_GoToPosition+0x7e>
    207e:	8c 81       	ldd	r24, Y+4	; 0x04
    2080:	85 30       	cpi	r24, 0x05	; 5
    2082:	28 f5       	brcc	.+74     	; 0x20ce <LCD_enu_GoToPosition+0x7e>
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	88 23       	and	r24, r24
    2088:	11 f1       	breq	.+68     	; 0x20ce <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 01       	movw	r18, r24
    209c:	21 50       	subi	r18, 0x01	; 1
    209e:	30 40       	sbci	r19, 0x00	; 0
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	88 2f       	mov	r24, r24
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	82 0f       	add	r24, r18
    20b2:	93 1f       	adc	r25, r19
    20b4:	82 95       	swap	r24
    20b6:	92 95       	swap	r25
    20b8:	90 7f       	andi	r25, 0xF0	; 240
    20ba:	98 27       	eor	r25, r24
    20bc:	80 7f       	andi	r24, 0xF0	; 240
    20be:	98 27       	eor	r25, r24
    20c0:	98 2f       	mov	r25, r24
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	89 0f       	add	r24, r25
    20c6:	81 58       	subi	r24, 0x81	; 129
    20c8:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <LCD_enu_SendString+0x6>
    20e8:	0f 92       	push	r0
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	9b 81       	ldd	r25, Y+3	; 0x03
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	c1 f0       	breq	.+48     	; 0x212e <LCD_enu_SendString+0x4c>
    20fe:	10 c0       	rjmp	.+32     	; 0x2120 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    210a:	ea 81       	ldd	r30, Y+2	; 0x02
    210c:	fb 81       	ldd	r31, Y+3	; 0x03
    210e:	20 81       	ld	r18, Z
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	9b 81       	ldd	r25, Y+3	; 0x03
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	9b 83       	std	Y+3, r25	; 0x03
    2118:	8a 83       	std	Y+2, r24	; 0x02
    211a:	82 2f       	mov	r24, r18
    211c:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    2120:	ea 81       	ldd	r30, Y+2	; 0x02
    2122:	fb 81       	ldd	r31, Y+3	; 0x03
    2124:	80 81       	ld	r24, Z
    2126:	88 23       	and	r24, r24
    2128:	59 f7       	brne	.-42     	; 0x2100 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    212a:	19 82       	std	Y+1, r1	; 0x01
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <LCD_enu_ClearPage+0x6>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	88 23       	and	r24, r24
    2156:	09 f4       	brne	.+2      	; 0x215a <LCD_enu_ClearPage+0x1a>
    2158:	49 c0       	rjmp	.+146    	; 0x21ec <LCD_enu_ClearPage+0xac>
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	85 30       	cpi	r24, 0x05	; 5
    215e:	08 f0       	brcs	.+2      	; 0x2162 <LCD_enu_ClearPage+0x22>
    2160:	45 c0       	rjmp	.+138    	; 0x21ec <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    2162:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	07 96       	adiw	r24, 0x07	; 7
    2176:	82 95       	swap	r24
    2178:	92 95       	swap	r25
    217a:	90 7f       	andi	r25, 0xF0	; 240
    217c:	98 27       	eor	r25, r24
    217e:	80 7f       	andi	r24, 0xF0	; 240
    2180:	98 27       	eor	r25, r24
    2182:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    2194:	80 e2       	ldi	r24, 0x20	; 32
    2196:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	80 31       	cpi	r24, 0x10	; 16
    21a4:	b8 f3       	brcs	.-18     	; 0x2194 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0b 96       	adiw	r24, 0x0b	; 11
    21b8:	82 95       	swap	r24
    21ba:	92 95       	swap	r25
    21bc:	90 7f       	andi	r25, 0xF0	; 240
    21be:	98 27       	eor	r25, r24
    21c0:	80 7f       	andi	r24, 0xF0	; 240
    21c2:	98 27       	eor	r25, r24
    21c4:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    21d2:	19 82       	std	Y+1, r1	; 0x01
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    21d6:	80 e2       	ldi	r24, 0x20	; 32
    21d8:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	8f 5f       	subi	r24, 0xFF	; 255
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	80 31       	cpi	r24, 0x10	; 16
    21e6:	b8 f3       	brcs	.-18     	; 0x21d6 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    21e8:	1a 82       	std	Y+2, r1	; 0x02
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    21fe:	cf 92       	push	r12
    2200:	ef 92       	push	r14
    2202:	0f 93       	push	r16
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	2e 97       	sbiw	r28, 0x0e	; 14
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	6f 83       	std	Y+7, r22	; 0x07
    221e:	48 87       	std	Y+8, r20	; 0x08
    2220:	29 87       	std	Y+9, r18	; 0x09
    2222:	0a 87       	std	Y+10, r16	; 0x0a
    2224:	eb 86       	std	Y+11, r14	; 0x0b
    2226:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	09 f4       	brne	.+2      	; 0x2236 <LCD_enu_DrawSpecialCharacter+0x38>
    2234:	b3 c0       	rjmp	.+358    	; 0x239c <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    2236:	1b 82       	std	Y+3, r1	; 0x03
    2238:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    223a:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    223c:	8f 81       	ldd	r24, Y+7	; 0x07
    223e:	88 23       	and	r24, r24
    2240:	09 f4       	brne	.+2      	; 0x2244 <LCD_enu_DrawSpecialCharacter+0x46>
    2242:	a9 c0       	rjmp	.+338    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    2244:	8f 81       	ldd	r24, Y+7	; 0x07
    2246:	89 30       	cpi	r24, 0x09	; 9
    2248:	08 f0       	brcs	.+2      	; 0x224c <LCD_enu_DrawSpecialCharacter+0x4e>
    224a:	a5 c0       	rjmp	.+330    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    224c:	88 85       	ldd	r24, Y+8	; 0x08
    224e:	88 30       	cpi	r24, 0x08	; 8
    2250:	08 f0       	brcs	.+2      	; 0x2254 <LCD_enu_DrawSpecialCharacter+0x56>
    2252:	a1 c0       	rjmp	.+322    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    2254:	88 85       	ldd	r24, Y+8	; 0x08
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	88 e0       	ldi	r24, 0x08	; 8
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	ac 01       	movw	r20, r24
    2260:	42 1b       	sub	r20, r18
    2262:	53 0b       	sbc	r21, r19
    2264:	9a 01       	movw	r18, r20
    2266:	8f 81       	ldd	r24, Y+7	; 0x07
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	28 17       	cp	r18, r24
    226e:	39 07       	cpc	r19, r25
    2270:	0c f4       	brge	.+2      	; 0x2274 <LCD_enu_DrawSpecialCharacter+0x76>
    2272:	91 c0       	rjmp	.+290    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	88 23       	and	r24, r24
    2278:	09 f4       	brne	.+2      	; 0x227c <LCD_enu_DrawSpecialCharacter+0x7e>
    227a:	8d c0       	rjmp	.+282    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	83 30       	cpi	r24, 0x03	; 3
    2280:	08 f0       	brcs	.+2      	; 0x2284 <LCD_enu_DrawSpecialCharacter+0x86>
    2282:	89 c0       	rjmp	.+274    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    2284:	8a 85       	ldd	r24, Y+10	; 0x0a
    2286:	88 23       	and	r24, r24
    2288:	09 f4       	brne	.+2      	; 0x228c <LCD_enu_DrawSpecialCharacter+0x8e>
    228a:	85 c0       	rjmp	.+266    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    228c:	8a 85       	ldd	r24, Y+10	; 0x0a
    228e:	81 31       	cpi	r24, 0x11	; 17
    2290:	08 f0       	brcs	.+2      	; 0x2294 <LCD_enu_DrawSpecialCharacter+0x96>
    2292:	81 c0       	rjmp	.+258    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    2294:	8c 85       	ldd	r24, Y+12	; 0x0c
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	08 f0       	brcs	.+2      	; 0x229c <LCD_enu_DrawSpecialCharacter+0x9e>
    229a:	7d c0       	rjmp	.+250    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
    229c:	8b 85       	ldd	r24, Y+11	; 0x0b
    229e:	85 30       	cpi	r24, 0x05	; 5
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <LCD_enu_DrawSpecialCharacter+0xa6>
    22a2:	79 c0       	rjmp	.+242    	; 0x2396 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	19 c0       	rjmp	.+50     	; 0x22da <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	9b 83       	std	Y+3, r25	; 0x03
    22b8:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	98 2f       	mov	r25, r24
    22be:	96 95       	lsr	r25
    22c0:	96 95       	lsr	r25
    22c2:	96 95       	lsr	r25
    22c4:	88 85       	ldd	r24, Y+8	; 0x08
    22c6:	29 2f       	mov	r18, r25
    22c8:	28 0f       	add	r18, r24
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	9b 81       	ldd	r25, Y+3	; 0x03
    22ce:	62 2f       	mov	r22, r18
    22d0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	88 5f       	subi	r24, 0xF8	; 248
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	8f 81       	ldd	r24, Y+7	; 0x07
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	28 17       	cp	r18, r24
    22f4:	39 07       	cpc	r19, r25
    22f6:	c4 f2       	brlt	.-80     	; 0x22a8 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    2302:	8c 85       	ldd	r24, Y+12	; 0x0c
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3e 87       	std	Y+14, r19	; 0x0e
    230a:	2d 87       	std	Y+13, r18	; 0x0d
    230c:	4d 85       	ldd	r20, Y+13	; 0x0d
    230e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2310:	41 15       	cp	r20, r1
    2312:	51 05       	cpc	r21, r1
    2314:	49 f0       	breq	.+18     	; 0x2328 <LCD_enu_DrawSpecialCharacter+0x12a>
    2316:	8d 85       	ldd	r24, Y+13	; 0x0d
    2318:	9e 85       	ldd	r25, Y+14	; 0x0e
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	39 f4       	brne	.+14     	; 0x232e <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    2320:	86 e0       	ldi	r24, 0x06	; 6
    2322:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2326:	03 c0       	rjmp	.+6      	; 0x232e <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    2338:	8b 85       	ldd	r24, Y+11	; 0x0b
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c 01       	movw	r18, r24
    2340:	21 50       	subi	r18, 0x01	; 1
    2342:	30 40       	sbci	r19, 0x00	; 0
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	82 95       	swap	r24
    235a:	92 95       	swap	r25
    235c:	90 7f       	andi	r25, 0xF0	; 240
    235e:	98 27       	eor	r25, r24
    2360:	80 7f       	andi	r24, 0xF0	; 240
    2362:	98 27       	eor	r25, r24
    2364:	98 2f       	mov	r25, r24
    2366:	8a 85       	ldd	r24, Y+10	; 0x0a
    2368:	89 0f       	add	r24, r25
    236a:	81 58       	subi	r24, 0x81	; 129
    236c:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    237a:	19 82       	std	Y+1, r1	; 0x01
    237c:	06 c0       	rjmp	.+12     	; 0x238a <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	99 81       	ldd	r25, Y+1	; 0x01
    238c:	8f 81       	ldd	r24, Y+7	; 0x07
    238e:	98 17       	cp	r25, r24
    2390:	b0 f3       	brcs	.-20     	; 0x237e <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    2392:	1c 82       	std	Y+4, r1	; 0x04
    2394:	05 c0       	rjmp	.+10     	; 0x23a0 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	8c 83       	std	Y+4, r24	; 0x04
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    239c:	83 e0       	ldi	r24, 0x03	; 3
    239e:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    23a2:	2e 96       	adiw	r28, 0x0e	; 14
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	0f 91       	pop	r16
    23b4:	ef 90       	pop	r14
    23b6:	cf 90       	pop	r12
    23b8:	08 95       	ret

000023ba <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    23ba:	0f 93       	push	r16
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	2e 97       	sbiw	r28, 0x0e	; 14
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	68 87       	std	Y+8, r22	; 0x08
    23d2:	79 87       	std	Y+9, r23	; 0x09
    23d4:	8a 87       	std	Y+10, r24	; 0x0a
    23d6:	9b 87       	std	Y+11, r25	; 0x0b
    23d8:	4c 87       	std	Y+12, r20	; 0x0c
    23da:	2d 87       	std	Y+13, r18	; 0x0d
    23dc:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    23e4:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    23e6:	88 85       	ldd	r24, Y+8	; 0x08
    23e8:	99 85       	ldd	r25, Y+9	; 0x09
    23ea:	aa 85       	ldd	r26, Y+10	; 0x0a
    23ec:	bb 85       	ldd	r27, Y+11	; 0x0b
    23ee:	bb 23       	and	r27, r27
    23f0:	8c f4       	brge	.+34     	; 0x2414 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    23f6:	88 85       	ldd	r24, Y+8	; 0x08
    23f8:	99 85       	ldd	r25, Y+9	; 0x09
    23fa:	aa 85       	ldd	r26, Y+10	; 0x0a
    23fc:	bb 85       	ldd	r27, Y+11	; 0x0b
    23fe:	b0 95       	com	r27
    2400:	a0 95       	com	r26
    2402:	90 95       	com	r25
    2404:	81 95       	neg	r24
    2406:	9f 4f       	sbci	r25, 0xFF	; 255
    2408:	af 4f       	sbci	r26, 0xFF	; 255
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	88 87       	std	Y+8, r24	; 0x08
    240e:	99 87       	std	Y+9, r25	; 0x09
    2410:	aa 87       	std	Y+10, r26	; 0x0a
    2412:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    2414:	88 85       	ldd	r24, Y+8	; 0x08
    2416:	99 85       	ldd	r25, Y+9	; 0x09
    2418:	aa 85       	ldd	r26, Y+10	; 0x0a
    241a:	bb 85       	ldd	r27, Y+11	; 0x0b
    241c:	8c 83       	std	Y+4, r24	; 0x04
    241e:	9d 83       	std	Y+5, r25	; 0x05
    2420:	ae 83       	std	Y+6, r26	; 0x06
    2422:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	ae 81       	ldd	r26, Y+6	; 0x06
    2430:	bf 81       	ldd	r27, Y+7	; 0x07
    2432:	2a e0       	ldi	r18, 0x0A	; 10
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__divmodsi4>
    2442:	da 01       	movw	r26, r20
    2444:	c9 01       	movw	r24, r18
    2446:	8c 83       	std	Y+4, r24	; 0x04
    2448:	9d 83       	std	Y+5, r25	; 0x05
    244a:	ae 83       	std	Y+6, r26	; 0x06
    244c:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	ae 81       	ldd	r26, Y+6	; 0x06
    2454:	bf 81       	ldd	r27, Y+7	; 0x07
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	a1 05       	cpc	r26, r1
    245a:	b1 05       	cpc	r27, r1
    245c:	19 f7       	brne	.-58     	; 0x2424 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    245e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2460:	88 23       	and	r24, r24
    2462:	09 f4       	brne	.+2      	; 0x2466 <LCD_enu_WriteIntegerNum+0xac>
    2464:	87 c0       	rjmp	.+270    	; 0x2574 <LCD_enu_WriteIntegerNum+0x1ba>
    2466:	8c 85       	ldd	r24, Y+12	; 0x0c
    2468:	83 30       	cpi	r24, 0x03	; 3
    246a:	08 f0       	brcs	.+2      	; 0x246e <LCD_enu_WriteIntegerNum+0xb4>
    246c:	83 c0       	rjmp	.+262    	; 0x2574 <LCD_enu_WriteIntegerNum+0x1ba>
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	88 23       	and	r24, r24
    2472:	09 f4       	brne	.+2      	; 0x2476 <LCD_enu_WriteIntegerNum+0xbc>
    2474:	7f c0       	rjmp	.+254    	; 0x2574 <LCD_enu_WriteIntegerNum+0x1ba>
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	81 31       	cpi	r24, 0x11	; 17
    247a:	08 f0       	brcs	.+2      	; 0x247e <LCD_enu_WriteIntegerNum+0xc4>
    247c:	7b c0       	rjmp	.+246    	; 0x2574 <LCD_enu_WriteIntegerNum+0x1ba>
    247e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2480:	85 30       	cpi	r24, 0x05	; 5
    2482:	08 f0       	brcs	.+2      	; 0x2486 <LCD_enu_WriteIntegerNum+0xcc>
    2484:	77 c0       	rjmp	.+238    	; 0x2574 <LCD_enu_WriteIntegerNum+0x1ba>
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	81 31       	cpi	r24, 0x11	; 17
    248a:	08 f0       	brcs	.+2      	; 0x248e <LCD_enu_WriteIntegerNum+0xd4>
    248c:	73 c0       	rjmp	.+230    	; 0x2574 <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    248e:	88 85       	ldd	r24, Y+8	; 0x08
    2490:	99 85       	ldd	r25, Y+9	; 0x09
    2492:	aa 85       	ldd	r26, Y+10	; 0x0a
    2494:	bb 85       	ldd	r27, Y+11	; 0x0b
    2496:	8c 83       	std	Y+4, r24	; 0x04
    2498:	9d 83       	std	Y+5, r25	; 0x05
    249a:	ae 83       	std	Y+6, r26	; 0x06
    249c:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    249e:	ce 01       	movw	r24, r28
    24a0:	04 96       	adiw	r24, 0x04	; 4
    24a2:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	61 e0       	ldi	r22, 0x01	; 1
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    24b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9c 01       	movw	r18, r24
    24b8:	21 50       	subi	r18, 0x01	; 1
    24ba:	30 40       	sbci	r19, 0x00	; 0
    24bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	82 0f       	add	r24, r18
    24ce:	93 1f       	adc	r25, r19
    24d0:	82 95       	swap	r24
    24d2:	92 95       	swap	r25
    24d4:	90 7f       	andi	r25, 0xF0	; 240
    24d6:	98 27       	eor	r25, r24
    24d8:	80 7f       	andi	r24, 0xF0	; 240
    24da:	98 27       	eor	r25, r24
    24dc:	98 2f       	mov	r25, r24
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	89 0f       	add	r24, r25
    24e2:	81 58       	subi	r24, 0x81	; 129
    24e4:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	88 23       	and	r24, r24
    24f6:	51 f1       	breq	.+84     	; 0x254c <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    24f8:	8d e2       	ldi	r24, 0x2D	; 45
    24fa:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    24fe:	26 c0       	rjmp	.+76     	; 0x254c <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	9d 81       	ldd	r25, Y+5	; 0x05
    2504:	ae 81       	ldd	r26, Y+6	; 0x06
    2506:	bf 81       	ldd	r27, Y+7	; 0x07
    2508:	2a e0       	ldi	r18, 0x0A	; 10
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__divmodsi4>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	80 5d       	subi	r24, 0xD0	; 208
    251e:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	ae 81       	ldd	r26, Y+6	; 0x06
    2528:	bf 81       	ldd	r27, Y+7	; 0x07
    252a:	2a e0       	ldi	r18, 0x0A	; 10
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__divmodsi4>
    253a:	da 01       	movw	r26, r20
    253c:	c9 01       	movw	r24, r18
    253e:	8c 83       	std	Y+4, r24	; 0x04
    2540:	9d 83       	std	Y+5, r25	; 0x05
    2542:	ae 83       	std	Y+6, r26	; 0x06
    2544:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	81 50       	subi	r24, 0x01	; 1
    254a:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	9d 81       	ldd	r25, Y+5	; 0x05
    2550:	ae 81       	ldd	r26, Y+6	; 0x06
    2552:	bf 81       	ldd	r27, Y+7	; 0x07
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	a1 05       	cpc	r26, r1
    2558:	b1 05       	cpc	r27, r1
    255a:	91 f6       	brne	.-92     	; 0x2500 <LCD_enu_WriteIntegerNum+0x146>
    255c:	06 c0       	rjmp	.+12     	; 0x256a <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    255e:	80 e3       	ldi	r24, 0x30	; 48
    2560:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	81 50       	subi	r24, 0x01	; 1
    2568:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	88 23       	and	r24, r24
    256e:	b9 f7       	brne	.-18     	; 0x255e <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    2570:	1b 82       	std	Y+3, r1	; 0x03
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
}
    257a:	2e 96       	adiw	r28, 0x0e	; 14
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    258e:	0f 93       	push	r16
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	63 97       	sbiw	r28, 0x13	; 19
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	6d 87       	std	Y+13, r22	; 0x0d
    25a6:	7e 87       	std	Y+14, r23	; 0x0e
    25a8:	8f 87       	std	Y+15, r24	; 0x0f
    25aa:	98 8b       	std	Y+16, r25	; 0x10
    25ac:	49 8b       	std	Y+17, r20	; 0x11
    25ae:	2a 8b       	std	Y+18, r18	; 0x12
    25b0:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    25b6:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    25b8:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    25ba:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    25bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    25be:	7e 85       	ldd	r23, Y+14	; 0x0e
    25c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c2:	98 89       	ldd	r25, Y+16	; 0x10
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	5c f4       	brge	.+22     	; 0x25ea <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	af 85       	ldd	r26, Y+15	; 0x0f
    25de:	b8 89       	ldd	r27, Y+16	; 0x10
    25e0:	b0 58       	subi	r27, 0x80	; 128
    25e2:	8d 87       	std	Y+13, r24	; 0x0d
    25e4:	9e 87       	std	Y+14, r25	; 0x0e
    25e6:	af 87       	std	Y+15, r26	; 0x0f
    25e8:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    25ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    25ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    25ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f0:	98 89       	ldd	r25, Y+16	; 0x10
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	89 87       	std	Y+9, r24	; 0x09
    25fc:	9a 87       	std	Y+10, r25	; 0x0a
    25fe:	ab 87       	std	Y+11, r26	; 0x0b
    2600:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	ab 85       	ldd	r26, Y+11	; 0x0b
    2608:	bc 85       	ldd	r27, Y+12	; 0x0c
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    2612:	9b 01       	movw	r18, r22
    2614:	ac 01       	movw	r20, r24
    2616:	6d 85       	ldd	r22, Y+13	; 0x0d
    2618:	7e 85       	ldd	r23, Y+14	; 0x0e
    261a:	8f 85       	ldd	r24, Y+15	; 0x0f
    261c:	98 89       	ldd	r25, Y+16	; 0x10
    261e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8c 83       	std	Y+4, r24	; 0x04
    2628:	9d 83       	std	Y+5, r25	; 0x05
    262a:	ae 83       	std	Y+6, r26	; 0x06
    262c:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	ab 85       	ldd	r26, Y+11	; 0x0b
    263a:	bc 85       	ldd	r27, Y+12	; 0x0c
    263c:	2a e0       	ldi	r18, 0x0A	; 10
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    264c:	da 01       	movw	r26, r20
    264e:	c9 01       	movw	r24, r18
    2650:	89 87       	std	Y+9, r24	; 0x09
    2652:	9a 87       	std	Y+10, r25	; 0x0a
    2654:	ab 87       	std	Y+11, r26	; 0x0b
    2656:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	ab 85       	ldd	r26, Y+11	; 0x0b
    265e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	a1 05       	cpc	r26, r1
    2664:	b1 05       	cpc	r27, r1
    2666:	19 f7       	brne	.-58     	; 0x262e <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	61 e0       	ldi	r22, 0x01	; 1
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    2672:	19 86       	std	Y+9, r1	; 0x09
    2674:	1a 86       	std	Y+10, r1	; 0x0a
    2676:	1b 86       	std	Y+11, r1	; 0x0b
    2678:	1c 86       	std	Y+12, r1	; 0x0c
    267a:	1f c0       	rjmp	.+62     	; 0x26ba <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    267c:	6c 81       	ldd	r22, Y+4	; 0x04
    267e:	7d 81       	ldd	r23, Y+5	; 0x05
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
    2682:	9f 81       	ldd	r25, Y+7	; 0x07
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8c 83       	std	Y+4, r24	; 0x04
    2696:	9d 83       	std	Y+5, r25	; 0x05
    2698:	ae 83       	std	Y+6, r26	; 0x06
    269a:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    269c:	6c 81       	ldd	r22, Y+4	; 0x04
    269e:	7d 81       	ldd	r23, Y+5	; 0x05
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	9f 81       	ldd	r25, Y+7	; 0x07
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	89 87       	std	Y+9, r24	; 0x09
    26ae:	9a 87       	std	Y+10, r25	; 0x0a
    26b0:	ab 87       	std	Y+11, r26	; 0x0b
    26b2:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	ab 85       	ldd	r26, Y+11	; 0x0b
    26c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    26ca:	9b 01       	movw	r18, r22
    26cc:	ac 01       	movw	r20, r24
    26ce:	6c 81       	ldd	r22, Y+4	; 0x04
    26d0:	7d 81       	ldd	r23, Y+5	; 0x05
    26d2:	8e 81       	ldd	r24, Y+6	; 0x06
    26d4:	9f 81       	ldd	r25, Y+7	; 0x07
    26d6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	2c ea       	ldi	r18, 0xAC	; 172
    26e4:	35 ec       	ldi	r19, 0xC5	; 197
    26e6:	47 e2       	ldi	r20, 0x27	; 39
    26e8:	57 e3       	ldi	r21, 0x37	; 55
    26ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    26ee:	88 23       	and	r24, r24
    26f0:	2c f6       	brge	.-118    	; 0x267c <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    26f2:	89 89       	ldd	r24, Y+17	; 0x11
    26f4:	88 23       	and	r24, r24
    26f6:	09 f4       	brne	.+2      	; 0x26fa <LCD_enu_WriteFloatNum+0x16c>
    26f8:	fd c0       	rjmp	.+506    	; 0x28f4 <LCD_enu_WriteFloatNum+0x366>
    26fa:	89 89       	ldd	r24, Y+17	; 0x11
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <LCD_enu_WriteFloatNum+0x174>
    2700:	f9 c0       	rjmp	.+498    	; 0x28f4 <LCD_enu_WriteFloatNum+0x366>
    2702:	8a 89       	ldd	r24, Y+18	; 0x12
    2704:	88 23       	and	r24, r24
    2706:	09 f4       	brne	.+2      	; 0x270a <LCD_enu_WriteFloatNum+0x17c>
    2708:	f5 c0       	rjmp	.+490    	; 0x28f4 <LCD_enu_WriteFloatNum+0x366>
    270a:	8a 89       	ldd	r24, Y+18	; 0x12
    270c:	81 31       	cpi	r24, 0x11	; 17
    270e:	08 f0       	brcs	.+2      	; 0x2712 <LCD_enu_WriteFloatNum+0x184>
    2710:	f1 c0       	rjmp	.+482    	; 0x28f4 <LCD_enu_WriteFloatNum+0x366>
    2712:	8b 89       	ldd	r24, Y+19	; 0x13
    2714:	85 30       	cpi	r24, 0x05	; 5
    2716:	08 f0       	brcs	.+2      	; 0x271a <LCD_enu_WriteFloatNum+0x18c>
    2718:	ed c0       	rjmp	.+474    	; 0x28f4 <LCD_enu_WriteFloatNum+0x366>
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	ab 85       	ldd	r26, Y+11	; 0x0b
    272a:	bc 85       	ldd	r27, Y+12	; 0x0c
    272c:	82 0f       	add	r24, r18
    272e:	93 1f       	adc	r25, r19
    2730:	a4 1f       	adc	r26, r20
    2732:	b5 1f       	adc	r27, r21
    2734:	81 31       	cpi	r24, 0x11	; 17
    2736:	91 05       	cpc	r25, r1
    2738:	a1 05       	cpc	r26, r1
    273a:	b1 05       	cpc	r27, r1
    273c:	08 f0       	brcs	.+2      	; 0x2740 <LCD_enu_WriteFloatNum+0x1b2>
    273e:	da c0       	rjmp	.+436    	; 0x28f4 <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	61 e0       	ldi	r22, 0x01	; 1
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    274a:	8b 89       	ldd	r24, Y+19	; 0x13
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9c 01       	movw	r18, r24
    2752:	21 50       	subi	r18, 0x01	; 1
    2754:	30 40       	sbci	r19, 0x00	; 0
    2756:	89 89       	ldd	r24, Y+17	; 0x11
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	82 0f       	add	r24, r18
    2768:	93 1f       	adc	r25, r19
    276a:	82 95       	swap	r24
    276c:	92 95       	swap	r25
    276e:	90 7f       	andi	r25, 0xF0	; 240
    2770:	98 27       	eor	r25, r24
    2772:	80 7f       	andi	r24, 0xF0	; 240
    2774:	98 27       	eor	r25, r24
    2776:	98 2f       	mov	r25, r24
    2778:	8a 89       	ldd	r24, Y+18	; 0x12
    277a:	89 0f       	add	r24, r25
    277c:	81 58       	subi	r24, 0x81	; 129
    277e:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	88 23       	and	r24, r24
    2790:	19 f0       	breq	.+6      	; 0x2798 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    2792:	8d e2       	ldi	r24, 0x2D	; 45
    2794:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    2798:	6d 85       	ldd	r22, Y+13	; 0x0d
    279a:	7e 85       	ldd	r23, Y+14	; 0x0e
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	98 89       	ldd	r25, Y+16	; 0x10
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	89 87       	std	Y+9, r24	; 0x09
    27aa:	9a 87       	std	Y+10, r25	; 0x0a
    27ac:	ab 87       	std	Y+11, r26	; 0x0b
    27ae:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    27b0:	ce 01       	movw	r24, r28
    27b2:	09 96       	adiw	r24, 0x09	; 9
    27b4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    27c2:	26 c0       	rjmp	.+76     	; 0x2810 <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    27ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    27cc:	2a e0       	ldi	r18, 0x0A	; 10
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	80 5d       	subi	r24, 0xD0	; 208
    27e2:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	ab 85       	ldd	r26, Y+11	; 0x0b
    27ec:	bc 85       	ldd	r27, Y+12	; 0x0c
    27ee:	2a e0       	ldi	r18, 0x0A	; 10
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    27fe:	da 01       	movw	r26, r20
    2800:	c9 01       	movw	r24, r18
    2802:	89 87       	std	Y+9, r24	; 0x09
    2804:	9a 87       	std	Y+10, r25	; 0x0a
    2806:	ab 87       	std	Y+11, r26	; 0x0b
    2808:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	81 50       	subi	r24, 0x01	; 1
    280e:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	ab 85       	ldd	r26, Y+11	; 0x0b
    2816:	bc 85       	ldd	r27, Y+12	; 0x0c
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	a1 05       	cpc	r26, r1
    281c:	b1 05       	cpc	r27, r1
    281e:	91 f6       	brne	.-92     	; 0x27c4 <LCD_enu_WriteFloatNum+0x236>
    2820:	06 c0       	rjmp	.+12     	; 0x282e <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    2822:	80 e3       	ldi	r24, 0x30	; 48
    2824:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	81 50       	subi	r24, 0x01	; 1
    282c:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	88 23       	and	r24, r24
    2832:	b9 f7       	brne	.-18     	; 0x2822 <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    2834:	6c 81       	ldd	r22, Y+4	; 0x04
    2836:	7d 81       	ldd	r23, Y+5	; 0x05
    2838:	8e 81       	ldd	r24, Y+6	; 0x06
    283a:	9f 81       	ldd	r25, Y+7	; 0x07
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    2848:	88 23       	and	r24, r24
    284a:	09 f4       	brne	.+2      	; 0x284e <LCD_enu_WriteFloatNum+0x2c0>
    284c:	51 c0       	rjmp	.+162    	; 0x28f0 <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    2858:	8e e2       	ldi	r24, 0x2E	; 46
    285a:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    285e:	6c 81       	ldd	r22, Y+4	; 0x04
    2860:	7d 81       	ldd	r23, Y+5	; 0x05
    2862:	8e 81       	ldd	r24, Y+6	; 0x06
    2864:	9f 81       	ldd	r25, Y+7	; 0x07
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	89 87       	std	Y+9, r24	; 0x09
    2870:	9a 87       	std	Y+10, r25	; 0x0a
    2872:	ab 87       	std	Y+11, r26	; 0x0b
    2874:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    2876:	ce 01       	movw	r24, r28
    2878:	09 96       	adiw	r24, 0x09	; 9
    287a:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <enu_ReverseInteger>
    287e:	26 c0       	rjmp	.+76     	; 0x28cc <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	ab 85       	ldd	r26, Y+11	; 0x0b
    2886:	bc 85       	ldd	r27, Y+12	; 0x0c
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	80 5d       	subi	r24, 0xD0	; 208
    289e:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    28a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    28aa:	2a e0       	ldi	r18, 0x0A	; 10
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    28ba:	da 01       	movw	r26, r20
    28bc:	c9 01       	movw	r24, r18
    28be:	89 87       	std	Y+9, r24	; 0x09
    28c0:	9a 87       	std	Y+10, r25	; 0x0a
    28c2:	ab 87       	std	Y+11, r26	; 0x0b
    28c4:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	81 50       	subi	r24, 0x01	; 1
    28ca:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    28d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	a1 05       	cpc	r26, r1
    28d8:	b1 05       	cpc	r27, r1
    28da:	91 f6       	brne	.-92     	; 0x2880 <LCD_enu_WriteFloatNum+0x2f2>
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    28de:	80 e3       	ldi	r24, 0x30	; 48
    28e0:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	81 50       	subi	r24, 0x01	; 1
    28e8:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	88 23       	and	r24, r24
    28ee:	b9 f7       	brne	.-18     	; 0x28de <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    28f0:	18 86       	std	Y+8, r1	; 0x08
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    28f8:	88 85       	ldd	r24, Y+8	; 0x08

}
    28fa:	63 96       	adiw	r28, 0x13	; 19
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	0f 91       	pop	r16
    290c:	08 95       	ret

0000290e <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	ac 97       	sbiw	r28, 0x2c	; 44
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	62 e0       	ldi	r22, 0x02	; 2
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	63 e0       	ldi	r22, 0x03	; 3
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    293c:	8c a5       	ldd	r24, Y+44	; 0x2c
    293e:	98 2f       	mov	r25, r24
    2940:	99 1f       	adc	r25, r25
    2942:	99 27       	eor	r25, r25
    2944:	99 1f       	adc	r25, r25
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	67 e0       	ldi	r22, 0x07	; 7
    294a:	49 2f       	mov	r20, r25
    294c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    2950:	8c a5       	ldd	r24, Y+44	; 0x2c
    2952:	82 95       	swap	r24
    2954:	86 95       	lsr	r24
    2956:	86 95       	lsr	r24
    2958:	83 70       	andi	r24, 0x03	; 3
    295a:	98 2f       	mov	r25, r24
    295c:	91 70       	andi	r25, 0x01	; 1
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	66 e0       	ldi	r22, 0x06	; 6
    2962:	49 2f       	mov	r20, r25
    2964:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    2968:	8c a5       	ldd	r24, Y+44	; 0x2c
    296a:	82 95       	swap	r24
    296c:	86 95       	lsr	r24
    296e:	87 70       	andi	r24, 0x07	; 7
    2970:	98 2f       	mov	r25, r24
    2972:	91 70       	andi	r25, 0x01	; 1
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	65 e0       	ldi	r22, 0x05	; 5
    2978:	49 2f       	mov	r20, r25
    297a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    297e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2980:	82 95       	swap	r24
    2982:	8f 70       	andi	r24, 0x0F	; 15
    2984:	98 2f       	mov	r25, r24
    2986:	91 70       	andi	r25, 0x01	; 1
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	64 e0       	ldi	r22, 0x04	; 4
    298c:	49 2f       	mov	r20, r25
    298e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	63 e0       	ldi	r22, 0x03	; 3
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e8       	ldi	r26, 0x80	; 128
    29a2:	bf e3       	ldi	r27, 0x3F	; 63
    29a4:	8f a3       	std	Y+39, r24	; 0x27
    29a6:	98 a7       	std	Y+40, r25	; 0x28
    29a8:	a9 a7       	std	Y+41, r26	; 0x29
    29aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	6f a1       	ldd	r22, Y+39	; 0x27
    29ae:	78 a5       	ldd	r23, Y+40	; 0x28
    29b0:	89 a5       	ldd	r24, Y+41	; 0x29
    29b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a e7       	ldi	r20, 0x7A	; 122
    29ba:	55 e4       	ldi	r21, 0x45	; 69
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8b a3       	std	Y+35, r24	; 0x23
    29c6:	9c a3       	std	Y+36, r25	; 0x24
    29c8:	ad a3       	std	Y+37, r26	; 0x25
    29ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29cc:	6b a1       	ldd	r22, Y+35	; 0x23
    29ce:	7c a1       	ldd	r23, Y+36	; 0x24
    29d0:	8d a1       	ldd	r24, Y+37	; 0x25
    29d2:	9e a1       	ldd	r25, Y+38	; 0x26
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9a a3       	std	Y+34, r25	; 0x22
    29ea:	89 a3       	std	Y+33, r24	; 0x21
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    29ee:	6b a1       	ldd	r22, Y+35	; 0x23
    29f0:	7c a1       	ldd	r23, Y+36	; 0x24
    29f2:	8d a1       	ldd	r24, Y+37	; 0x25
    29f4:	9e a1       	ldd	r25, Y+38	; 0x26
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	6f a1       	ldd	r22, Y+39	; 0x27
    2a08:	78 a5       	ldd	r23, Y+40	; 0x28
    2a0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9a a3       	std	Y+34, r25	; 0x22
    2a2c:	89 a3       	std	Y+33, r24	; 0x21
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <enu_PassByteAndLatch+0x140>
    2a30:	80 e9       	ldi	r24, 0x90	; 144
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	98 a3       	std	Y+32, r25	; 0x20
    2a36:	8f 8f       	std	Y+31, r24	; 0x1f
    2a38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a3a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <enu_PassByteAndLatch+0x12e>
    2a40:	98 a3       	std	Y+32, r25	; 0x20
    2a42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	89 a1       	ldd	r24, Y+33	; 0x21
    2a46:	9a a1       	ldd	r25, Y+34	; 0x22
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9a a3       	std	Y+34, r25	; 0x22
    2a4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a50:	9a a1       	ldd	r25, Y+34	; 0x22
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <enu_PassByteAndLatch+0x122>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9a a3       	std	Y+34, r25	; 0x22
    2a6a:	89 a3       	std	Y+33, r24	; 0x21
    2a6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a70:	9e 8f       	std	Y+30, r25	; 0x1e
    2a72:	8d 8f       	std	Y+29, r24	; 0x1d
    2a74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <enu_PassByteAndLatch+0x16a>
    2a7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	63 e0       	ldi	r22, 0x03	; 3
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    2a8a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a8c:	86 95       	lsr	r24
    2a8e:	86 95       	lsr	r24
    2a90:	86 95       	lsr	r24
    2a92:	98 2f       	mov	r25, r24
    2a94:	91 70       	andi	r25, 0x01	; 1
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	67 e0       	ldi	r22, 0x07	; 7
    2a9a:	49 2f       	mov	r20, r25
    2a9c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    2aa0:	8c a5       	ldd	r24, Y+44	; 0x2c
    2aa2:	86 95       	lsr	r24
    2aa4:	86 95       	lsr	r24
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	91 70       	andi	r25, 0x01	; 1
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	66 e0       	ldi	r22, 0x06	; 6
    2aae:	49 2f       	mov	r20, r25
    2ab0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    2ab4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ab6:	86 95       	lsr	r24
    2ab8:	98 2f       	mov	r25, r24
    2aba:	91 70       	andi	r25, 0x01	; 1
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	65 e0       	ldi	r22, 0x05	; 5
    2ac0:	49 2f       	mov	r20, r25
    2ac2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    2ac6:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ac8:	98 2f       	mov	r25, r24
    2aca:	91 70       	andi	r25, 0x01	; 1
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	64 e0       	ldi	r22, 0x04	; 4
    2ad0:	49 2f       	mov	r20, r25
    2ad2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	63 e0       	ldi	r22, 0x03	; 3
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e8       	ldi	r26, 0x80	; 128
    2ae6:	bf e3       	ldi	r27, 0x3F	; 63
    2ae8:	89 8f       	std	Y+25, r24	; 0x19
    2aea:	9a 8f       	std	Y+26, r25	; 0x1a
    2aec:	ab 8f       	std	Y+27, r26	; 0x1b
    2aee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	69 8d       	ldd	r22, Y+25	; 0x19
    2af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a e7       	ldi	r20, 0x7A	; 122
    2afe:	55 e4       	ldi	r21, 0x45	; 69
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8d 8b       	std	Y+21, r24	; 0x15
    2b0a:	9e 8b       	std	Y+22, r25	; 0x16
    2b0c:	af 8b       	std	Y+23, r26	; 0x17
    2b0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b10:	6d 89       	ldd	r22, Y+21	; 0x15
    2b12:	7e 89       	ldd	r23, Y+22	; 0x16
    2b14:	8f 89       	ldd	r24, Y+23	; 0x17
    2b16:	98 8d       	ldd	r25, Y+24	; 0x18
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    2b32:	6d 89       	ldd	r22, Y+21	; 0x15
    2b34:	7e 89       	ldd	r23, Y+22	; 0x16
    2b36:	8f 89       	ldd	r24, Y+23	; 0x17
    2b38:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9c 8b       	std	Y+20, r25	; 0x14
    2b70:	8b 8b       	std	Y+19, r24	; 0x13
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <enu_PassByteAndLatch+0x284>
    2b74:	80 e9       	ldi	r24, 0x90	; 144
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	9a 8b       	std	Y+18, r25	; 0x12
    2b7a:	89 8b       	std	Y+17, r24	; 0x11
    2b7c:	89 89       	ldd	r24, Y+17	; 0x11
    2b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <enu_PassByteAndLatch+0x272>
    2b84:	9a 8b       	std	Y+18, r25	; 0x12
    2b86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9c 8b       	std	Y+20, r25	; 0x14
    2b90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	8b 89       	ldd	r24, Y+19	; 0x13
    2b94:	9c 89       	ldd	r25, Y+20	; 0x14
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <enu_PassByteAndLatch+0x266>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	98 8b       	std	Y+16, r25	; 0x10
    2bb6:	8f 87       	std	Y+15, r24	; 0x0f
    2bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bba:	98 89       	ldd	r25, Y+16	; 0x10
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <enu_PassByteAndLatch+0x2ae>
    2bc0:	98 8b       	std	Y+16, r25	; 0x10
    2bc2:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e4       	ldi	r27, 0x40	; 64
    2bd6:	8b 87       	std	Y+11, r24	; 0x0b
    2bd8:	9c 87       	std	Y+12, r25	; 0x0c
    2bda:	ad 87       	std	Y+13, r26	; 0x0d
    2bdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	4a e7       	ldi	r20, 0x7A	; 122
    2bec:	55 e4       	ldi	r21, 0x45	; 69
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8f 83       	std	Y+7, r24	; 0x07
    2bf8:	98 87       	std	Y+8, r25	; 0x08
    2bfa:	a9 87       	std	Y+9, r26	; 0x09
    2bfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	2c f4       	brge	.+10     	; 0x2c20 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9e 83       	std	Y+6, r25	; 0x06
    2c1c:	8d 83       	std	Y+5, r24	; 0x05
    2c1e:	3f c0       	rjmp	.+126    	; 0x2c9e <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    2c20:	6f 81       	ldd	r22, Y+7	; 0x07
    2c22:	78 85       	ldd	r23, Y+8	; 0x08
    2c24:	89 85       	ldd	r24, Y+9	; 0x09
    2c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	3f ef       	ldi	r19, 0xFF	; 255
    2c2c:	4f e7       	ldi	r20, 0x7F	; 127
    2c2e:	57 e4       	ldi	r21, 0x47	; 71
    2c30:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2c34:	18 16       	cp	r1, r24
    2c36:	4c f5       	brge	.+82     	; 0x2c8a <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e2       	ldi	r20, 0x20	; 32
    2c46:	51 e4       	ldi	r21, 0x41	; 65
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	0f c0       	rjmp	.+30     	; 0x2c80 <enu_PassByteAndLatch+0x372>
    2c62:	80 e9       	ldi	r24, 0x90	; 144
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <enu_PassByteAndLatch+0x360>
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	69 f7       	brne	.-38     	; 0x2c62 <enu_PassByteAndLatch+0x354>
    2c88:	14 c0       	rjmp	.+40     	; 0x2cb2 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <enu_PassByteAndLatch+0x39c>
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    2cb2:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    2cb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    2cb6:	ac 96       	adiw	r28, 0x2c	; 44
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	27 97       	sbiw	r28, 0x07	; 7
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
    2ce0:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <enu_AddCustomCharacter+0x28>
    2cee:	79 c0       	rjmp	.+242    	; 0x2de2 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	88 30       	cpi	r24, 0x08	; 8
    2cf4:	08 f0       	brcs	.+2      	; 0x2cf8 <enu_AddCustomCharacter+0x30>
    2cf6:	72 c0       	rjmp	.+228    	; 0x2ddc <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    2cf8:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	3f 83       	std	Y+7, r19	; 0x07
    2d0c:	2e 83       	std	Y+6, r18	; 0x06
    2d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d10:	9f 81       	ldd	r25, Y+7	; 0x07
    2d12:	83 30       	cpi	r24, 0x03	; 3
    2d14:	91 05       	cpc	r25, r1
    2d16:	a9 f1       	breq	.+106    	; 0x2d82 <enu_AddCustomCharacter+0xba>
    2d18:	2e 81       	ldd	r18, Y+6	; 0x06
    2d1a:	3f 81       	ldd	r19, Y+7	; 0x07
    2d1c:	24 30       	cpi	r18, 0x04	; 4
    2d1e:	31 05       	cpc	r19, r1
    2d20:	7c f4       	brge	.+30     	; 0x2d40 <enu_AddCustomCharacter+0x78>
    2d22:	8e 81       	ldd	r24, Y+6	; 0x06
    2d24:	9f 81       	ldd	r25, Y+7	; 0x07
    2d26:	81 30       	cpi	r24, 0x01	; 1
    2d28:	91 05       	cpc	r25, r1
    2d2a:	19 f1       	breq	.+70     	; 0x2d72 <enu_AddCustomCharacter+0xaa>
    2d2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d30:	22 30       	cpi	r18, 0x02	; 2
    2d32:	31 05       	cpc	r19, r1
    2d34:	14 f5       	brge	.+68     	; 0x2d7a <enu_AddCustomCharacter+0xb2>
    2d36:	8e 81       	ldd	r24, Y+6	; 0x06
    2d38:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	b1 f0       	breq	.+44     	; 0x2d6a <enu_AddCustomCharacter+0xa2>
    2d3e:	34 c0       	rjmp	.+104    	; 0x2da8 <enu_AddCustomCharacter+0xe0>
    2d40:	2e 81       	ldd	r18, Y+6	; 0x06
    2d42:	3f 81       	ldd	r19, Y+7	; 0x07
    2d44:	25 30       	cpi	r18, 0x05	; 5
    2d46:	31 05       	cpc	r19, r1
    2d48:	21 f1       	breq	.+72     	; 0x2d92 <enu_AddCustomCharacter+0xca>
    2d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4e:	85 30       	cpi	r24, 0x05	; 5
    2d50:	91 05       	cpc	r25, r1
    2d52:	dc f0       	brlt	.+54     	; 0x2d8a <enu_AddCustomCharacter+0xc2>
    2d54:	2e 81       	ldd	r18, Y+6	; 0x06
    2d56:	3f 81       	ldd	r19, Y+7	; 0x07
    2d58:	26 30       	cpi	r18, 0x06	; 6
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	f1 f0       	breq	.+60     	; 0x2d9a <enu_AddCustomCharacter+0xd2>
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	9f 81       	ldd	r25, Y+7	; 0x07
    2d62:	87 30       	cpi	r24, 0x07	; 7
    2d64:	91 05       	cpc	r25, r1
    2d66:	e9 f0       	breq	.+58     	; 0x2da2 <enu_AddCustomCharacter+0xda>
    2d68:	1f c0       	rjmp	.+62     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    2d6a:	80 e4       	ldi	r24, 0x40	; 64
    2d6c:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2d70:	1b c0       	rjmp	.+54     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    2d72:	88 e4       	ldi	r24, 0x48	; 72
    2d74:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2d78:	17 c0       	rjmp	.+46     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    2d7a:	80 e5       	ldi	r24, 0x50	; 80
    2d7c:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2d80:	13 c0       	rjmp	.+38     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    2d82:	88 e5       	ldi	r24, 0x58	; 88
    2d84:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    2d8a:	80 e6       	ldi	r24, 0x60	; 96
    2d8c:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2d90:	0b c0       	rjmp	.+22     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    2d92:	88 e6       	ldi	r24, 0x68	; 104
    2d94:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    2d9a:	80 e7       	ldi	r24, 0x70	; 112
    2d9c:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
    2da0:	03 c0       	rjmp	.+6      	; 0x2da8 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    2da2:	88 e7       	ldi	r24, 0x78	; 120
    2da4:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    2db2:	19 82       	std	Y+1, r1	; 0x01
    2db4:	0e c0       	rjmp	.+28     	; 0x2dd2 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	28 2f       	mov	r18, r24
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	e2 0f       	add	r30, r18
    2dc4:	f3 1f       	adc	r31, r19
    2dc6:	80 81       	ld	r24, Z
    2dc8:	0e 94 87 14 	call	0x290e	; 0x290e <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 30       	cpi	r24, 0x08	; 8
    2dd6:	78 f3       	brcs	.-34     	; 0x2db6 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    2dd8:	1a 82       	std	Y+2, r1	; 0x02
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ddc:	82 e0       	ldi	r24, 0x02	; 2
    2dde:	8a 83       	std	Y+2, r24	; 0x02
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2de2:	83 e0       	ldi	r24, 0x03	; 3
    2de4:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2de8:	27 96       	adiw	r28, 0x07	; 7
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <enu_ConvertDigitToASCII+0x6>
    2e00:	0f 92       	push	r0
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	9b 83       	std	Y+3, r25	; 0x03
    2e08:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	89 f0       	breq	.+34     	; 0x2e38 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    2e16:	ea 81       	ldd	r30, Y+2	; 0x02
    2e18:	fb 81       	ldd	r31, Y+3	; 0x03
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8a 30       	cpi	r24, 0x0A	; 10
    2e1e:	48 f4       	brcc	.+18     	; 0x2e32 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    2e20:	ea 81       	ldd	r30, Y+2	; 0x02
    2e22:	fb 81       	ldd	r31, Y+3	; 0x03
    2e24:	80 81       	ld	r24, Z
    2e26:	80 5d       	subi	r24, 0xD0	; 208
    2e28:	ea 81       	ldd	r30, Y+2	; 0x02
    2e2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e2c:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	05 c0       	rjmp	.+10     	; 0x2e3c <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    2e32:	82 e0       	ldi	r24, 0x02	; 2
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    2e38:	83 e0       	ldi	r24, 0x03	; 3
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	27 97       	sbiw	r28, 0x07	; 7
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	9f 83       	std	Y+7, r25	; 0x07
    2e68:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    2e6a:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    2e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <enu_ReverseInteger+0x2c>
    2e74:	58 c0       	rjmp	.+176    	; 0x2f26 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    2e76:	19 82       	std	Y+1, r1	; 0x01
    2e78:	1a 82       	std	Y+2, r1	; 0x02
    2e7a:	1b 82       	std	Y+3, r1	; 0x03
    2e7c:	1c 82       	std	Y+4, r1	; 0x04
    2e7e:	3c c0       	rjmp	.+120    	; 0x2ef8 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	9a 81       	ldd	r25, Y+2	; 0x02
    2e84:	ab 81       	ldd	r26, Y+3	; 0x03
    2e86:	bc 81       	ldd	r27, Y+4	; 0x04
    2e88:	2a e0       	ldi	r18, 0x0A	; 10
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 2b 18 	call	0x3056	; 0x3056 <__mulsi3>
    2e98:	7b 01       	movw	r14, r22
    2e9a:	8c 01       	movw	r16, r24
    2e9c:	ee 81       	ldd	r30, Y+6	; 0x06
    2e9e:	ff 81       	ldd	r31, Y+7	; 0x07
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ea6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ea8:	2a e0       	ldi	r18, 0x0A	; 10
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	8e 0d       	add	r24, r14
    2ebe:	9f 1d       	adc	r25, r15
    2ec0:	a0 1f       	adc	r26, r16
    2ec2:	b1 1f       	adc	r27, r17
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	ab 83       	std	Y+3, r26	; 0x03
    2eca:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    2ecc:	ee 81       	ldd	r30, Y+6	; 0x06
    2ece:	ff 81       	ldd	r31, Y+7	; 0x07
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ed6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ed8:	2a e0       	ldi	r18, 0x0A	; 10
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 4a 18 	call	0x3094	; 0x3094 <__udivmodsi4>
    2ee8:	da 01       	movw	r26, r20
    2eea:	c9 01       	movw	r24, r18
    2eec:	ee 81       	ldd	r30, Y+6	; 0x06
    2eee:	ff 81       	ldd	r31, Y+7	; 0x07
    2ef0:	80 83       	st	Z, r24
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	a2 83       	std	Z+2, r26	; 0x02
    2ef6:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    2ef8:	ee 81       	ldd	r30, Y+6	; 0x06
    2efa:	ff 81       	ldd	r31, Y+7	; 0x07
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	a2 81       	ldd	r26, Z+2	; 0x02
    2f02:	b3 81       	ldd	r27, Z+3	; 0x03
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	a1 05       	cpc	r26, r1
    2f08:	b1 05       	cpc	r27, r1
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <enu_ReverseInteger+0xc4>
    2f0c:	b9 cf       	rjmp	.-142    	; 0x2e80 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    2f0e:	ee 81       	ldd	r30, Y+6	; 0x06
    2f10:	ff 81       	ldd	r31, Y+7	; 0x07
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	9a 81       	ldd	r25, Y+2	; 0x02
    2f16:	ab 81       	ldd	r26, Y+3	; 0x03
    2f18:	bc 81       	ldd	r27, Y+4	; 0x04
    2f1a:	80 83       	st	Z, r24
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	a2 83       	std	Z+2, r26	; 0x02
    2f20:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    2f22:	1d 82       	std	Y+5, r1	; 0x05
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2f26:	83 e0       	ldi	r24, 0x03	; 3
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2f2c:	27 96       	adiw	r28, 0x07	; 7
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	1f 91       	pop	r17
    2f3e:	0f 91       	pop	r16
    2f40:	ff 90       	pop	r15
    2f42:	ef 90       	pop	r14
    2f44:	08 95       	ret

00002f46 <Counter_vid_IncrementCounter>:
static Counter_t str_SystemCounter = { 0 };


//APIs Implementaion 
void Counter_vid_IncrementCounter(void* Copy_pvid_Parameters)
{
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <Counter_vid_IncrementCounter+0x6>
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	9a 83       	std	Y+2, r25	; 0x02
    2f52:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pvid_Parameters)
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	51 f0       	breq	.+20     	; 0x2f70 <Counter_vid_IncrementCounter+0x2a>
    {
        if( (((Counter_t*)Copy_pvid_Parameters)->Count) < COUNTER_MAX_NUMBER) 
    2f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f60:	80 81       	ld	r24, Z
    2f62:	89 30       	cpi	r24, 0x09	; 9
    2f64:	28 f4       	brcc	.+10     	; 0x2f70 <Counter_vid_IncrementCounter+0x2a>
        {
            (((Counter_t*)Copy_pvid_Parameters)->Count)++;
    2f66:	e9 81       	ldd	r30, Y+1	; 0x01
    2f68:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8f 5f       	subi	r24, 0xFF	; 255
    2f6e:	80 83       	st	Z, r24
        }
    }
  
}
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <Counter_vid_DecrementCounter>:

void Counter_vid_DecrementCounter(void* Copy_pvid_Parameters)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <Counter_vid_DecrementCounter+0x6>
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pvid_Parameters)
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	51 f0       	breq	.+20     	; 0x2fa4 <Counter_vid_DecrementCounter+0x2a>
    {
        if( (((Counter_t*)Copy_pvid_Parameters)->Count) > COUNTER_MIN_NUMBER) 
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	80 81       	ld	r24, Z
    2f96:	88 23       	and	r24, r24
    2f98:	29 f0       	breq	.+10     	; 0x2fa4 <Counter_vid_DecrementCounter+0x2a>
        {
            (((Counter_t*)Copy_pvid_Parameters)->Count)--;
    2f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9e:	80 81       	ld	r24, Z
    2fa0:	81 50       	subi	r24, 0x01	; 1
    2fa2:	80 83       	st	Z, r24
        }
    }
}
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <Counter_enu_Initialization>:

extern ErrorState_t Counter_enu_Initialization(void)
{
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	0f 92       	push	r0
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01

    //Initializintg MCALs and HALs
    LCD_enu_Initialization();
    2fbc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_enu_Initialization>
    EXTI_enu_Initialization();
    2fc0:	0e 94 ab 06 	call	0xd56	; 0xd56 <EXTI_enu_Initialization>



    //Setting Call back functions for INT0 and INT1
    EXTI_enu_SetCallBack(EXTI_INT0, Counter_vid_IncrementCounter, &str_SystemCounter);
    2fc4:	23 ea       	ldi	r18, 0xA3	; 163
    2fc6:	37 e1       	ldi	r19, 0x17	; 23
    2fc8:	4e e8       	ldi	r20, 0x8E	; 142
    2fca:	51 e0       	ldi	r21, 0x01	; 1
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	b9 01       	movw	r22, r18
    2fd0:	0e 94 92 07 	call	0xf24	; 0xf24 <EXTI_enu_SetCallBack>

    EXTI_enu_SetCallBack(EXTI_INT1, Counter_vid_DecrementCounter, &str_SystemCounter);
    2fd4:	2d eb       	ldi	r18, 0xBD	; 189
    2fd6:	37 e1       	ldi	r19, 0x17	; 23
    2fd8:	4e e8       	ldi	r20, 0x8E	; 142
    2fda:	51 e0       	ldi	r21, 0x01	; 1
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	b9 01       	movw	r22, r18
    2fe0:	0e 94 92 07 	call	0xf24	; 0xf24 <EXTI_enu_SetCallBack>
    
    //Clearing any set flags
    EXTI_enu_ClearINTFx(EXTI_INT0);
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	0e 94 7f 07 	call	0xefe	; 0xefe <EXTI_enu_ClearINTFx>
    EXTI_enu_ClearINTFx(EXTI_INT1);
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	0e 94 7f 07 	call	0xefe	; 0xefe <EXTI_enu_ClearINTFx>

    //Enabling Interrupts by setting GIE
    SREG_vid_EnableBitI();
    2ff0:	0e 94 9b 06 	call	0xd36	; 0xd36 <SREG_vid_EnableBitI>

    return Local_u8_ErrorFlag;
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ff6:	0f 90       	pop	r0
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <Counter_enu_Operation>:

extern ErrorState_t Counter_enu_Operation(void)
{
    2ffe:	0f 93       	push	r16
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	0f 92       	push	r0
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	89 83       	std	Y+1, r24	; 0x01

    //Placing cursor to print main message
    LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 28 10 	call	0x2050	; 0x2050 <LCD_enu_GoToPosition>
    //Displaying main message
    LCD_enu_SendString("Counter = ");
    3018:	80 e6       	ldi	r24, 0x60	; 96
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_enu_SendString>
    
    do
    {
        LCD_enu_WriteIntegerNum(str_SystemCounter.Count, LCD_ROW_1, LCD_COLUMN_11, LCD_PAGE_1);
    3020:	80 91 8e 01 	lds	r24, 0x018E
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	a0 e0       	ldi	r26, 0x00	; 0
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	41 e0       	ldi	r20, 0x01	; 1
    3032:	2b e0       	ldi	r18, 0x0B	; 11
    3034:	01 e0       	ldi	r16, 0x01	; 1
    3036:	0e 94 dd 11 	call	0x23ba	; 0x23ba <LCD_enu_WriteIntegerNum>
    303a:	f2 cf       	rjmp	.-28     	; 0x3020 <Counter_enu_Operation+0x22>

0000303c <main>:
#include "Counter_Interface.h"

int main(void)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
	//Initializing Counter
	Counter_enu_Initialization();
    3044:	0e 94 d7 17 	call	0x2fae	; 0x2fae <Counter_enu_Initialization>

	//Operating the system
	Counter_enu_Operation();
    3048:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <Counter_enu_Operation>

	return 0;
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
}
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <__mulsi3>:
    3056:	62 9f       	mul	r22, r18
    3058:	d0 01       	movw	r26, r0
    305a:	73 9f       	mul	r23, r19
    305c:	f0 01       	movw	r30, r0
    305e:	82 9f       	mul	r24, r18
    3060:	e0 0d       	add	r30, r0
    3062:	f1 1d       	adc	r31, r1
    3064:	64 9f       	mul	r22, r20
    3066:	e0 0d       	add	r30, r0
    3068:	f1 1d       	adc	r31, r1
    306a:	92 9f       	mul	r25, r18
    306c:	f0 0d       	add	r31, r0
    306e:	83 9f       	mul	r24, r19
    3070:	f0 0d       	add	r31, r0
    3072:	74 9f       	mul	r23, r20
    3074:	f0 0d       	add	r31, r0
    3076:	65 9f       	mul	r22, r21
    3078:	f0 0d       	add	r31, r0
    307a:	99 27       	eor	r25, r25
    307c:	72 9f       	mul	r23, r18
    307e:	b0 0d       	add	r27, r0
    3080:	e1 1d       	adc	r30, r1
    3082:	f9 1f       	adc	r31, r25
    3084:	63 9f       	mul	r22, r19
    3086:	b0 0d       	add	r27, r0
    3088:	e1 1d       	adc	r30, r1
    308a:	f9 1f       	adc	r31, r25
    308c:	bd 01       	movw	r22, r26
    308e:	cf 01       	movw	r24, r30
    3090:	11 24       	eor	r1, r1
    3092:	08 95       	ret

00003094 <__udivmodsi4>:
    3094:	a1 e2       	ldi	r26, 0x21	; 33
    3096:	1a 2e       	mov	r1, r26
    3098:	aa 1b       	sub	r26, r26
    309a:	bb 1b       	sub	r27, r27
    309c:	fd 01       	movw	r30, r26
    309e:	0d c0       	rjmp	.+26     	; 0x30ba <__udivmodsi4_ep>

000030a0 <__udivmodsi4_loop>:
    30a0:	aa 1f       	adc	r26, r26
    30a2:	bb 1f       	adc	r27, r27
    30a4:	ee 1f       	adc	r30, r30
    30a6:	ff 1f       	adc	r31, r31
    30a8:	a2 17       	cp	r26, r18
    30aa:	b3 07       	cpc	r27, r19
    30ac:	e4 07       	cpc	r30, r20
    30ae:	f5 07       	cpc	r31, r21
    30b0:	20 f0       	brcs	.+8      	; 0x30ba <__udivmodsi4_ep>
    30b2:	a2 1b       	sub	r26, r18
    30b4:	b3 0b       	sbc	r27, r19
    30b6:	e4 0b       	sbc	r30, r20
    30b8:	f5 0b       	sbc	r31, r21

000030ba <__udivmodsi4_ep>:
    30ba:	66 1f       	adc	r22, r22
    30bc:	77 1f       	adc	r23, r23
    30be:	88 1f       	adc	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	1a 94       	dec	r1
    30c4:	69 f7       	brne	.-38     	; 0x30a0 <__udivmodsi4_loop>
    30c6:	60 95       	com	r22
    30c8:	70 95       	com	r23
    30ca:	80 95       	com	r24
    30cc:	90 95       	com	r25
    30ce:	9b 01       	movw	r18, r22
    30d0:	ac 01       	movw	r20, r24
    30d2:	bd 01       	movw	r22, r26
    30d4:	cf 01       	movw	r24, r30
    30d6:	08 95       	ret

000030d8 <__divmodsi4>:
    30d8:	97 fb       	bst	r25, 7
    30da:	09 2e       	mov	r0, r25
    30dc:	05 26       	eor	r0, r21
    30de:	0e d0       	rcall	.+28     	; 0x30fc <__divmodsi4_neg1>
    30e0:	57 fd       	sbrc	r21, 7
    30e2:	04 d0       	rcall	.+8      	; 0x30ec <__divmodsi4_neg2>
    30e4:	d7 df       	rcall	.-82     	; 0x3094 <__udivmodsi4>
    30e6:	0a d0       	rcall	.+20     	; 0x30fc <__divmodsi4_neg1>
    30e8:	00 1c       	adc	r0, r0
    30ea:	38 f4       	brcc	.+14     	; 0x30fa <__divmodsi4_exit>

000030ec <__divmodsi4_neg2>:
    30ec:	50 95       	com	r21
    30ee:	40 95       	com	r20
    30f0:	30 95       	com	r19
    30f2:	21 95       	neg	r18
    30f4:	3f 4f       	sbci	r19, 0xFF	; 255
    30f6:	4f 4f       	sbci	r20, 0xFF	; 255
    30f8:	5f 4f       	sbci	r21, 0xFF	; 255

000030fa <__divmodsi4_exit>:
    30fa:	08 95       	ret

000030fc <__divmodsi4_neg1>:
    30fc:	f6 f7       	brtc	.-4      	; 0x30fa <__divmodsi4_exit>
    30fe:	90 95       	com	r25
    3100:	80 95       	com	r24
    3102:	70 95       	com	r23
    3104:	61 95       	neg	r22
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	8f 4f       	sbci	r24, 0xFF	; 255
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	08 95       	ret

0000310e <__prologue_saves__>:
    310e:	2f 92       	push	r2
    3110:	3f 92       	push	r3
    3112:	4f 92       	push	r4
    3114:	5f 92       	push	r5
    3116:	6f 92       	push	r6
    3118:	7f 92       	push	r7
    311a:	8f 92       	push	r8
    311c:	9f 92       	push	r9
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	ca 1b       	sub	r28, r26
    3138:	db 0b       	sbc	r29, r27
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	09 94       	ijmp

00003146 <__epilogue_restores__>:
    3146:	2a 88       	ldd	r2, Y+18	; 0x12
    3148:	39 88       	ldd	r3, Y+17	; 0x11
    314a:	48 88       	ldd	r4, Y+16	; 0x10
    314c:	5f 84       	ldd	r5, Y+15	; 0x0f
    314e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3150:	7d 84       	ldd	r7, Y+13	; 0x0d
    3152:	8c 84       	ldd	r8, Y+12	; 0x0c
    3154:	9b 84       	ldd	r9, Y+11	; 0x0b
    3156:	aa 84       	ldd	r10, Y+10	; 0x0a
    3158:	b9 84       	ldd	r11, Y+9	; 0x09
    315a:	c8 84       	ldd	r12, Y+8	; 0x08
    315c:	df 80       	ldd	r13, Y+7	; 0x07
    315e:	ee 80       	ldd	r14, Y+6	; 0x06
    3160:	fd 80       	ldd	r15, Y+5	; 0x05
    3162:	0c 81       	ldd	r16, Y+4	; 0x04
    3164:	1b 81       	ldd	r17, Y+3	; 0x03
    3166:	aa 81       	ldd	r26, Y+2	; 0x02
    3168:	b9 81       	ldd	r27, Y+1	; 0x01
    316a:	ce 0f       	add	r28, r30
    316c:	d1 1d       	adc	r29, r1
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	ed 01       	movw	r28, r26
    317a:	08 95       	ret

0000317c <_exit>:
    317c:	f8 94       	cli

0000317e <__stop_program>:
    317e:	ff cf       	rjmp	.-2      	; 0x317e <__stop_program>
